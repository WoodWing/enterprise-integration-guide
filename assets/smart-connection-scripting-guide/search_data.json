{
    "0": {
        "title": "Scripting Guide for Studio for InDesign & InCopy",
        "author": "",
        "category": "",
        "content": "--- layout: guide title: Scripting Guide for Studio for InDesign & InCopy description: Scripting Guide for Studio for InDesign & InCopy permalink: 1068-index --- ## Introduction Many aspects of Studio for InDesign & InCopy are scriptable using JavaScript. This guide contains examples sharing how to script the scripting object model that deals with Studio. It should be used as a companion to InDesign\u2019s Scripting Guide and the scripting model presented by the Adobe ExtendScript Toolkit. This guide can be used for the following client application versions: - Studio for InDesign & InCopy 2022 - Studio for InDesign & InCopy 2023 - Studio for InDesign & InCopy 2024 - Studio for InDesign & InCopy 2025 ## Required knowledge We assume the reader of this guide is familiar with: - The functionality of the Studio or Enterprise Server system. - The functionality of Studio within InDesign and InCopy. - JavaScript language. For more information, see: [https:\/\/javascript.info](https:\/\/javascript.info). ## Support To discuss any issues relating to scripting Studio for InDesign and InCopy, visit the [WoodWing Community](https:\/\/helpcenter.woodwing.com\/hc\/en-us\/community\/topics) (log-in required). If you require further support for Studio or Enterprise Server, visit WoodWing\u2019s [Help Center](https:\/\/helpcenter.woodwing.com\/hc\/en-us) and follow the directions for submitting questions. ",
        "url": "1068-index"
    },
    "1": {
        "title": "Application",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application sortid: 1 permalink: 1065-index --- The object representing the InDesign or InCopy application. ### Properties * [entSession](Properties\/entSession.md) * [studioPreferences](Properties\/studioPreferences.md) * [woodwingLogging](.\/woodwingLogging.md) ### Methods * [browseQuery](Methods\/browseQuery.md) * [getDossiersForItem](Methods\/getDossiersForItem.md) * [getEntMetaData](Methods\/getEntMetaData.md) * [jsonRequest](Methods\/jsonRequest.md) * [namedQuery](Methods\/namedQuery.md) * [offlineQuery](Methods\/offlineQuery.md) * [openObject](Methods\/openObject.md) * [openObjects](Methods\/openObjects.md) * [performSimpleRequest](Methods\/performSimpleRequest.md) * [queryObjects](Methods\/queryObjects.md) * [sendObjectToNext](Methods\/sendObjectToNext.md) * [setEntMetaData](Methods\/setEntMetaData.md) * [storedUserQuery](Methods\/storedUserQuery.md) * [updateGeometry](Methods\/updateGeometry.md) * [updatePanels](Methods\/updatePanels.md) ",
        "url": "1065-index"
    },
    "2": {
        "title": "Application methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application methods permalink: 1077-index --- Methods on the Application object. * [browseQuery](.\/browseQuery.md) * [getDossiersForItem](.\/getDossiersForItem.md) * [getEntMetaData](.\/getEntMetaData.md) * [jsonRequest](.\/jsonRequest.md) * [namedQuery](.\/namedQuery.md) * [offlineQuery](.\/offlineQuery.md) * [openObject](.\/openObject.md) * [openObjects](.\/openObjects.md) * [performSimpleRequest](.\/performSimpleRequest.md) * [queryObjects](.\/queryObjects.md) * [sendObjectToNext](.\/sendObjectToNext.md) * [setEntMetaData](.\/setEntMetaData.md) * [storedUserQuery](.\/storedUserQuery.md) * [updateGeometry](.\/updateGeometry.md) * [updatePanels](.\/updatePanels.md) ",
        "url": "1077-index"
    },
    "3": {
        "title": "browseQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: browseQuery sortid: 1 permalink: 1076-browseQuery --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.browseQuery(brand, issue, section, state); ``` ### Parameters **brand** _string_ The name of the Brand to browse for. **issue** _string_ The name of the Issue to browse for. **section** _string_ The name of the Section to browse for. **state** _string_ The name of the State to browse for. **Return value** _string_ A string representing the Browse query result. The result is comma separated. ## Description The `browseQuery()` method generates the result of the Browse query returned by the Studio or Enterprise server. ## Examples **Get the results for a specific query** ```javascript \/\/ Get browse query results from the server. var queryResult = app.browseQuery(\"WW News\", \"1st Issue\", \"News\", \"Ready\"); \/\/ queryResult is now: \/\/ \/\/ \"Columns: <int, ID><string, Name><string, Type><string, In Use By> \/\/ <int, Rating><multilist, Issues><list, Status><string, Status ID> \/\/ <int, Flag><list, Category><string, Category><double, Width> \/\/ <double, Height><string, Created By><string, Aspect ratio> \/\/ <string, Urgency><datetime, Created On><multiline, Description> \/\/ <string, Copyright (c)><int, Size><datetime, Modified On> \/\/ <string, Modified By><string, Author><list, Route To> \/\/ <string, Placed On><list, Brand><string, Brand ID> \/\/ <string, Planned Page Range><string, Page Range><string, FlagMsg> \/\/ <icon, Deadline><datetime, Deadline><string, Placed On Page> \/\/ <multiline, Comment><string, Color Space><int, Columns> \/\/ <string, Issue ID><string, Format><bool, LockForOffline> \/\/ <multilist, Issue IDs><multilist, Edition IDs><bool, HasChildren> \/\/ \/\/ Rows: \/\/ <6315, test-layout, Article, , , 1st Issue, Ready, 2, , \/\/ News, 1, 523.275591, 769.889764, Joe, , , 06\/12\/2018 09:07, , , \/\/ 56 KB, 06\/12\/2018 09:10, Joe, , , L-testupdate1, WW News, 1, , , , \/\/ 0;cdcdcd, , 1, , , 1, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ <1921, AWinttroart1, Article, , , 1st Issue, Ready, 2, , \/\/ News, 1, 164, 175, Joe, , , 03\/01\/2018 14:54, , , 56 KB, \/\/ 03\/01\/2018 15:05, Joe, , Joe, LWinttroart1, WW News, 1, , , , \/\/ 0;cdcdcd, , 1, , , 3, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ <1922, Art2, Article, , , 1st Issue, Ready, 2, , News, 1, \/\/ 523.275591, 769.889764, Joe, , , 03\/01\/2018 14:59, , , 50 KB, \/\/ 03\/01\/2018 15:01, Joe, , , LWinttroart1, WW News, 1, , , , 0;cdcdcd, \/\/ , 1, , , 1, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ \/\/ First Entry: 1 \/\/ \/\/ Listed Entries: 3 \/\/ \/\/ Total Entries: 3\" ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1076-browseQuery"
    },
    "4": {
        "title": "getDossiersForItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getDossiersForItem sortid: 2 permalink: 1078-getDossiersForItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.getDossiersForItem(objectId); ``` ### Parameters **objectId** _string_ The ID of the object on the Studio or Enterprise Server used to retrieve the IDs of the Dossiers that contain this object. **Return value** _string[]_ An array of string representing the found Dossier IDs. ## Description The `getDossierForItem()` method performs a query on the Studio or Enterprise Server to retrieve all Dossier IDs of which the object is part of. ## Examples **Example title** ```javascript \/\/ prerequisites: \/\/ - Create, for example, a Layout on the server (e.g. Layout gets ID '41217'). \/\/ - Create multiple Dossiers. (e.g. Dossiers have IDs '41218' and '41219') \/\/ - Put the Layout in the both Dossiers. var layoutId = \"41217\"; var dossierIds = app.getDossiersForItem(layoutId); \/\/ [ '41218', '41219' ] ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1078-getDossiersForItem"
    },
    "5": {
        "title": "getEntMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getEntMetaData sortid: 3 permalink: 1082-getEntMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.getEntMetaData(objectId); ``` ### Parameters **objectId** _string_ The ID of the object to obtain properties for on Studio Server. **Return value** [_EntMetaData_](..\/..\/EntMetaData\/index.md) The EntMetaData object containing all metadata properties of the object in Studio Server. ## Description The `getEntMetaData()` method returns an [EntMetaData](..\/..\/EntMetaData\/index.md) object of a Studio server object by its ID. The EntMetaData object can be manipulated by setting new metadata by using [`setEntMetaData()`](.\/setEntMetaData.md). ## Examples **Example title** ```javascript \/\/ Get metadata of object '19083' and change the metadata properties of the Studio server object. var objectID = \"19083\"; var statusKey = \"Core_Basket\"; \/\/ Status var customKey = \"C_CITIES\"; \/\/ Custom property var metaDataObject = app.getEntMetaData(objectID); var statusValue = metaDataObject.get(statusKey); var customValue = metaDataObject.get(customKey); metaDataObject.set(statusKey, \"Layouts\"); metaDataObject.set(customKey, [\"Paris\", \"Berlin\"]); app.setEntMetaData(metaDataObject); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | 17.0.2+ \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1082-getEntMetaData"
    },
    "6": {
        "title": "jsonRequest",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: jsonRequest sortid: 4 permalink: 1079-jsonRequest --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.jsonRequest(jsonUrl, jsonRequest); ``` ### Parameters **jsonUrl** _string_ The path to the Studio or Enterprise server URL which can receive and respond to requests done in JSON object string format. **jsonRequest** _string_ The request to post to the above URL in JSON object string format. **Return value** _string_ A string containing the complete and total server response. ## Description The `jsonRequest()` method posts a JSON object string as a request to a Studio or Enterprise Server URL in order to receive a response in JSON object string format. ## Examples Full working script examples for QueryObjects, DeleteObject, GetPublicationDate: [jsonRequestSamples.zip](https:\/\/github.com\/WoodWing\/enterprise-integration-guide\/raw\/master\/assets\/download\/jsonRequest-samples.zip) **QueryObject code snippet** ```javascript #include \"json2.jsxinc\" \/\/ Included in the jsonRequest-samples.zip. var serverUrl = \"https:\/\/studio.enterprise.woodwing.net\/server\/index.php?protocol=JSON\"; \/\/ Construct the request. var requestObject = { method: \"QueryObjects\", id: \"1\", params: [ { Params: [ { Property: \"Publication\", Value: \"WW News\", Operation: \"=\", __classname__: \"QueryParam\", }, { Property: \"Type\", Value: \"Image\", Operation: \"=\", __classname__: \"QueryParam\", }, { Property: \"Name\", Value: \"Beachball\", Operation: \"contains\", __classname__: \"QueryParam\", }, ], FirstEntry: 1, MinimalProps: [\"ID\", \"Name\", \"Type\", \"Category\", \"Issues\", \"State\"], Order: [ { Property: \"Name\", Direction: true, __classname__: \"QueryOrder\", }, ], Ticket: app.entSession.activeTicket, }, ], jsonrpc: \"2.0\", }; \/\/ Execute the request and get the response. var response = JSON.parse( app.jsonRequest(serverUrl, JSON.stringify(requestObject)) ); \/\/ Get the object with the requested information. var requestedObject = response.result.Rows[0]; \/\/ Get the individual values. var objectType = requestedObject[1]; \/\/ Images var objectName = requestedObject[2]; \/\/ Beachball var brandName = requestedObject[18]; \/\/ WW News ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1079-jsonRequest"
    },
    "7": {
        "title": "namedQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: namedQuery sortid: 5 permalink: 1080-namedQuery --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.namedQuery(queryName [, filename] [, fileType]); ``` ### Parameters **queryName** _string_ The name of the query **fileName** _string (Optional)_ The name of the object or file. **fileType** _string (Optional)_ The type of th object or file. **Return value** _string_ A string representing the Browse query result. The result is comma separated. ## Description The `namedQuery()` method performs a named query. It can be used for the Inbox, Templates and NameSearch queries. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1080-namedQuery"
    },
    "8": {
        "title": "offlineQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: offlineQuery sortid: 6 permalink: 1081-offlineQuery --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.offlineQuery(); ``` ### Parameters **Return value** _string_ A string representing the result for the offline query event. ## Description The `namedQuery()` method performs an offline query. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1081-offlineQuery"
    },
    "9": {
        "title": "openObject",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: openObject sortid: 7 permalink: 1082-openObject --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.openObject(objectId [, checkout] [, withWindow] [, type] [, dossierId]); ``` ### Parameters **objectId** _string_ The ID of the object to open on Studio or Enterprise Server **checkout** _boolean (Optional)_ Pass `false` to open the document as read-only. For template files, pass `false` to open an instance instead of the original object. Default value is `true`. **withWindow** _boolean (Optional)_ Pass `false` to open the document without opening a window. Default is `true`. **type** _string (Optional)_ The object type. Default is an empty string. **dossierId** _string (Optional)_ The ID of the default parent Dossier. Default is an empty string. The passed Dossier ID will be used as the default selected Dossier in the Save As dialog when creating an Article or Image from the Layout (if the document is a Layout). **server** _string (Optional)_ <sub>(Supported from v14.1)<\/sub> The name of the server on which the object with the `objectId` is stored. When needed the user will get the possibility to log in to this server. **Return value** _Document_ The Document object which is opened. Undefined when a Document could not be opened. ## Description The `openObject()` method opens a Document from the Studio or Enterprise Server. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1082-openObject"
    },
    "10": {
        "title": "openObjects",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: openObjects sortid: 8 permalink: 1082-openObjects --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript app.openObjects(server, ids [, readonly] [, instantiate] [, dossier]); ``` ### Parameters **server** _string_ The name of Studio or Enterprise Server (as defined in the WWSettings.xml file) from which the files should be opened. **objectId** _string[]_ The IDs of the files that should be opened. **readonly** _boolean (Optional)_ Defines if the file should be opened as read-only. Default value: `false`. Notes: - Has to be set to true when a layout is opened in InCopy. - Layout templates and Layout Module templates cannot be opened as read-only. **instantiate** _boolean (Optional)_ Defines if a new document should be instantiated from a template. The referenced file should therefore be a template; the parameter is ignored when the file is a regular layout or article. Default value: `true`. **dossier** _string (Optional)_ The ID of the default parent Dossier. Only used when instantiating Layout templates or Layout Module templates. Default value: an empty string. **Return value** The `openObjects()` method does not return anything. ## Description The `openObject()` method opens files from the Studio or Enterprise Server. It will give the user the possibility to log in when that is not yet the case. It does not throw errors for non existing objects. Not supported for InDesign Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1082-openObjects"
    },
    "11": {
        "title": "performSimpleRequest",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: performSimpleRequest sortid: 9 permalink: 1083-performSimpleRequest --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.performSimpleRequest(anyUrl); ``` ### Parameters **anyUrl** _string_ Any valid URL. **Return value** _string_ A string containing the complete and total server response. ## Description The `performSimpleRequest()` calls a URL and returns the response as a string. ## Examples ** Call phpinfo.php on a local Studio Server** ```javascript var sURL = \"http:\/\/localhost\/StudioServer\/server\/wwtest\/phpinfo.php\"; var sResult = app.performSimpleRequest(sURL); \/\/ Chop the result for display purposes if (sResult.length > 200) { sResult = sResult.substr(0, 200); sResult += \"...\"; } alert(sResult); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1083-performSimpleRequest"
    },
    "12": {
        "title": "queryObjects",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: queryObjects sortid: 10 permalink: 1084-queryObjects --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.queryObjects(criteria); ``` ### Parameters **criteria** _string[]_ The query criteria in the form of `<key, value>` pairs ```javascript criteria[0] = 'Brand, WW News'; criteria[1] = 'Issue, 2nd Issue'; ... ``` **Return value** _string_ A string representing the query result. ## Description The `queryObjects()` method performs a user query based in the passed criteria. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1084-queryObjects"
    },
    "13": {
        "title": "sendObjectToNext",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: sendObjectToNext sortid: 11 permalink: 1085-sendObjectToNext --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.sendObjectToNext(objectId); ``` ### Parameters **objectId** _string_ The object ID on the Studio or Enterprise Server. **Return value** The `sendObjectToNext()` method does not return anything. ## Description The `sendObjectToNext()` method sends an object to its next status. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1085-sendObjectToNext"
    },
    "14": {
        "title": "setEntMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: setEntMetaData sortid: 12 permalink: 1082-setEntMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.setEntMetaData(metaData); ``` ### Parameters **metaData** _EntMetaData_ Meta data of the object to set metadata properties for. **Return value** _int32_ The status returned from the Studio Server ## Description The `setEntMetaData()` method sets metadata properties for an object stored in Studio Server. The object identifier of the Studio Server object is included in the EntMetaData object. The method throws an exception in case of an error. Limitations: - the method will only be successful if the object is not locked, by either the current user or another user. - only properties that are configured for the Set Properties dialog can be changed using the scripting method. ## Examples **Example title** ```javascript \/\/ get metadata of object '19083', change the 'Cities' custom property of type multilist and set the metadata on the server object. var objID = \"19083\"; var meta; var key = \"C_CITIES\"; try { meta = app.getEntMetaData(objID); var objectStatus = meta.get(key); meta.set(key, [\"Paris\", \"Berlin\"]); app.setEntMetaData(meta); } catch (e) { alert( \"Setting metadata properties for [\" + key + \"] failed: [\" + e.message + \"].\" ); } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | 17.0.2+ \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1082-setEntMetaData"
    },
    "15": {
        "title": "storedUserQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: storedUserQuery sortid: 13 permalink: 1086-storedUserQuery --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.storedUserQuery(queryName); ``` ### Parameters **queryName** _string_ The stored name of the query **Return value** _string_ A string representing the stored user query result. ## Description The `storedUserQuery()` method generates the result for the strored user query event. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1086-storedUserQuery"
    },
    "16": {
        "title": "updateGeometry",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updateGeometry sortid: 14 permalink: 1246-updateGeometry --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript app.updateGeometry(); ``` ### Parameters **objectId** _string_ The ID of the layout that contains the new geometry information **Return value** The `updateGeometry()` method does not return anything. ## Description The `updateGeometry()` method updates the geometry of an article in InCopy by reopening the layout. In case of failure it throws an exception. This method can be used in conjunction with the `afterGeometryNotification` scripting event. ## Examples See scripting event afterGeometryNotification. ## Supported versions | Adobe Version | Supported | | ------------- | ---------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Application](.\/index.md) ",
        "url": "1246-updateGeometry"
    },
    "17": {
        "title": "updatePanels",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updatePanels sortid: 15 permalink: 1247-updatePanels --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript app.updatePanels(); ``` ### Parameters **Return value** The `updatePanels()` method does not return anything. ## Description The `updatePanels()` method refreshes the contents of all Studio for InDesign and InCopy query panels. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1247-updatePanels"
    },
    "18": {
        "title": "Application properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application properties permalink: 1073-index --- Properties on the Application object. * [entSession](.\/entSession.md) * [studioPreferences](.\/studioPreferences.md) * [woodwingLogging](.\/woodwingLogging.md) ",
        "url": "1073-index"
    },
    "19": {
        "title": "entSession",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entSession sortid: 11 permalink: 1087-entSession --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.entSession; ``` ### Access _readonly_ ### Parameters **Return value** _Session_ The Studio or Enterprise Server Session object. ## Description The `entSession` property gives access to the Studio or Enterprise Server session by returning a Session object. For more info about the Session object please see the [Session](..\/..\/Session\/index.md) documentation. ## Examples **Check if there is an active session** When `activeUrl` is empty, there is no active session. ```javascript \/\/ Check if the session is active. var sessionObject = app.entSession; var activeSession = sessionObject.activeUrl !== \"\"; \/\/ When logged in, activeSession is now 'true'. \/\/ When not logged in, activeSession is 'false'. ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Session](..\/..\/Session\/index.md) ",
        "url": "1087-entSession"
    },
    "20": {
        "title": "woodwingLogging",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: woodwingLogging sortid: 11 permalink: 1088-woodwingLogging --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.woodwingLogging; ``` ### Access _read\/write_ ### Parameters **Return value** boolean Status (true or false) of the woodwingLogging preference. ## Description The `woodwingLogging` property turns off and on WoodWing logging. ## Examples **Turn on WoodWing logging** ```javascript app.woodwingLogging = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1088-woodwingLogging"
    },
    "21": {
        "title": "studioPreferences",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: studioPreferences sortid: 12 permalink: 1087-studioPreferences --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.studioPreferences; ``` ### Access _readonly_ ### Parameters **Return value** _StudioPreference_ WoodWing Studio preference settings object. ## Description The `studioPreferences` property gives access to the WoodWing Studio preference settings by returning a StudioPreference object. For more info about the StudioPreferences object please see the [StudioPreference](..\/..\/StudioPreference\/index.md) documentation. ## Examples You can find examples in the description of the StudioPreference properties. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [StudioPreference](..\/..\/StudioPreference\/index.md) ",
        "url": "1087-studioPreferences"
    },
    "22": {
        "title": "Document",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Document sortid: 2 permalink: 1088-index --- The Document in InDesign, InDesign Server (layout) or InCopy (article). ### Properties * [activeEdition](Properties\/activeEdition.md) * [defaultEdition](Properties\/defaultEdition.md) * [entMetaData](Properties\/entMetaData.md) * [entWorkflow](Properties\/entWorkflow.md) * [managedArticles](Properties\/managedArticles.md) * [managedImages](Properties\/managedImages.md) * [managedAdverts](Properties\/managedAdverts.md) * [managedLayoutModules](Properties\/managedLayoutModules.md) * [studioDocumentPreferences](Properties\/studioDocumentPreferences.md) ",
        "url": "1088-index"
    },
    "23": {
        "title": "Document properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Document properties permalink: 1093-index --- Properties on the Document object. * [activeEdition](.\/activeEdition.md) * [defaultEdition](.\/defaultEdition.md) * [entMetaData](.\/entMetaData.md) * [entWorkflow](.\/entWorkflow.md) * [managedAdverts](.\/managedAdverts.md) * [managedArticles](.\/managedArticles.md) * [managedImages](.\/managedImages.md) * [managedLayoutModules](.\/managedLayoutModules.md) * [studioDocumentPreferences](.\/studioDocumentPreferences.md)",
        "url": "1093-index"
    },
    "24": {
        "title": "activeEdition",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeEdition sortid: 12 permalink: 1089-activeEdition --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.activeEdition; ``` ### Access _read\/write_ ### Parameters **Return value** _string_ The active Edition. ## Description The `activeEdition` property is used to get the active Edition of the current Document. The metadata of the Document contains all possible Editions that can be set. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1089-activeEdition"
    },
    "25": {
        "title": "studioDocumentPreferences",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: studioDocumentPreferences sortid: 12 permalink: 1087-studioDocumentPreferences --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript app.studioDocumentPreferences; ``` ### Access _readonly_ ### Parameters **Return value** _StudioDocumentPreference_ WoodWing Studio Document preference settings object. ## Description The `studioDocumentPreferences` property gives access to the WoodWing Studio Document preference settings by returning a StudioDocumentPreference object. For more info about the StudioDocumentPreferences object please see the [StudioDocumentPreference](..\/..\/StudioDocumentPreference\/index.md) documentation. ## Examples You can find examples in the description of the StudioDocumentPreference properties. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [StudioDocumentPreference](..\/..\/StudioDocumentPreference\/index.md) ",
        "url": "1087-studioDocumentPreferences"
    },
    "26": {
        "title": "defaultEditions",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: defaultEditions sortid: 13 permalink: 1090-defaultEditions --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.defaultEditions; ``` ### Access _read\/write_ ### Parameters **Return value** _string[]_ A list of Edition names. ## Description The `defaultEditions` property is used to get the list of Edition names that new page items will be assigned to on creation. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1090-defaultEditions"
    },
    "27": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 14 permalink: 1091-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1091-entMetaData"
    },
    "28": {
        "title": "entWorkflow",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entWorkflow sortid: 15 permalink: 1092-entWorkflow --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.entWorkflow; ``` ### Access _readonly_ ### Parameters **Return value** _EntWorkflow_ An EntWorkflow object. ## Description The `entWorkflow` property is used to get access to the Studio or Enterprise Server worlkflow actions for the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1092-entWorkflow"
    },
    "29": {
        "title": "managedAdverts",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedAdverts sortid: 16 permalink: 1094-managedAdverts --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.managedAdverts; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedAdverts_ A ManagedAdverts object. ## Description The `managedAdverts` property is used to get all managed adverts belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1094-managedAdverts"
    },
    "30": {
        "title": "managedArticles",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticles sortid: 17 permalink: 1095-managedArticles --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.managedArticles; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedArticles_ A ManagedArticles object. ## Description The `managedArticles` property is used to get all managed articles belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1095-managedArticles"
    },
    "31": {
        "title": "managedImages",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedImages sortid: 18 permalink: 1096-managedImages --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.managedImages; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedImages_ A ManagedImages object. ## Description The `managedImages` property is used to get all managed images belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1096-managedImages"
    },
    "32": {
        "title": "managedLayoutModules",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedLayoutModules sortid: 19 permalink: 1097-managedLayoutModules --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Document.managedLayoutModules; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedLayoutModules_ A ManagedLayoutModules object. ## Description The `managedLayoutModules` property is used to get all managed Layout Modules belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1097-managedLayoutModules"
    },
    "33": {
        "title": "Dossier",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier sortid: 3 permalink: 1098-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [items](Properties\/items.md) ### Methods * [addItem](Methods\/addItem.md) * [create](Methods\/create.md) * [refresh](Methods\/refresh.md) * [remove](Methods\/remove.md) * [removeItem](Methods\/removeItem.md) * [save](Methods\/save.md)",
        "url": "1098-index"
    },
    "34": {
        "title": "Dossier methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier methods permalink: 1101-index --- Methods on the Dossier object. * [addItem](.\/addItem.md) * [create](.\/create.md) * [refresh](.\/refresh.md) * [remove](.\/remove.md) * [removeItem](.\/removeItem.md) * [save](.\/save.md) ",
        "url": "1101-index"
    },
    "35": {
        "title": "removeItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: removeItem sortid: 20 permalink: 1099-addItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.removeItem(objectId); ``` ### Parameters **objectId** _string_ The object ID on the Studio or Enterprise Server of the object to remove from the Dossier. **Return value** The `removeItem()` method does not return anything. ## Description The `removeItem()` method removes an item from the Dossier. Removes the item from the corresponding Dossier in Studio or Enterprise Server as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1099-addItem"
    },
    "36": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 21 permalink: 1100-create --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.create(); ``` ### Parameters **Return value** Before version 19.0.3 build 23 for 2024 and version 20.0.0 build 9 for 2025 the `create()` method does not return anything. Starting from these versions, the `create()` method returns the newly created Dossier object. ## Description The `create()` method creates a new Dossier object on the Studio Server. ## Examples **Getting metadata using the initial Dossier object after creation** ```javascript var myDossier = app.dossiers.add(); var dosMetaData = myDossier.entMetaData; dosMetaData.set(\"Core_Name\", \"New_Dossier\"); dosMetaData.set(\"Core_Publication\", \"WW Erik\"); dosMetaData.set(\"Core_Issue\", \"Issue 1\"); dosMetaData.set(\"Core_Section\", \"Sport\"); \/\/ Creates a database object, for example, with ID 43786 myDossier.create(); \/\/ Only from v19.0.3 b23 for 2024 and v20.0.0 b9 for 2025 alert(dosMetaData.get(\"Core_ID\")); \/\/ 43786 ``` **Getting metadata using a new Dossier object after creation** ```javascript var myDossier = app.dossiers.add(); var dosMetaData = myDossier.entMetaData; dosMetaData.set(\"Core_Name\", \"New_Dossier\"); dosMetaData.set(\"Core_Publication\", \"WW Erik\"); dosMetaData.set(\"Core_Issue\", \"Issue 1\"); dosMetaData.set(\"Core_Section\", \"Sport\"); \/\/ Only from v19.0.3 b23 for 2024 and v20.0.0 b9 for 2025 \/\/ Creates a database object, for example, with ID 43786 var newDossier = myDossier.create(); var newDosMetaData = newDossier.entMetaData; alert(newDosMetaData.get(\"Core_ID\")); \/\/ 43786 ``` ## Supported versions | Adobe Version | Supported | Returns created Dossier object | | ------------- | --------- | ------------------------------ | | 2022 | \u2714 | | | 2023 | \u2714 | | | 2024 | \u2714 | \u2714 v19.0.3 b23 and up | | 2025 | \u2714 | \u2714 v20.0.0 b9 and up | ",
        "url": "1100-create"
    },
    "37": {
        "title": "refresh",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: refresh sortid: 22 permalink: 1102-refresh --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.refresh(); ``` ### Parameters **Return value** The `refresh()` method does not return anything. ## Description The `refresh()` method refreshes the Dossier object with new information from the Studio or Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1102-refresh"
    },
    "38": {
        "title": "remove",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: remove sortid: 23 permalink: 1103-remove --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.remove(); ``` ### Parameters **Return value** The `remove()` method does not return anything. ## Description The `remove()` method removes the Dossier object. The corresponding Dossier is removed from Studio or Enterprise Server as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1103-remove"
    },
    "39": {
        "title": "addItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: addItem sortid: 24 permalink: 1104-removeItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.addItem(objectId); ``` ### Parameters **objectId** _string_ The object ID on the Studio or Enterprise Server of the object to add to the Dossier. **Return value** The `addItem()` method does not return anything. ## Description The `addItem()` method adds an item to the Dossier. Adds the item to the corresponding Dossier in Studio or Enterprise Server as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1104-removeItem"
    },
    "40": {
        "title": "save",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: save sortid: 25 permalink: 1105-save --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.save(); ``` ### Parameters **Return value** The `save()` method does not return anything. ## Description The `save()` method saves the Dossier object. The corresponding Dossier is saved in Studio or Enterprise Server as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1105-save"
    },
    "41": {
        "title": "Dossier properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier properties permalink: 1107-index --- Properties on the Dossier object. * [entMetaData](.\/entMetaData.md) * [items](.\/items.md)",
        "url": "1107-index"
    },
    "42": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 26 permalink: 1106-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the Dossier. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1106-entMetaData"
    },
    "43": {
        "title": "items",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: items sortid: 28 permalink: 1108-items --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossier.items; ``` ### Access _readonly_ ### Parameters **Return value** _string[]_ A string of Studio or Enterprise Server object IDs. ## Description The `items` property is used to get a list of IDs of Studio or Enterprise Server objects which are residing in the current Dossier. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1108-items"
    },
    "44": {
        "title": "Dossiers",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossiers sortid: 4 permalink: 1109-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md) * [retrieve](Methods\/retrieve.md)",
        "url": "1109-index"
    },
    "45": {
        "title": "Dossiers methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossiers methods sortid: 29 permalink: 1112-index --- Methods on the Dossiers object. * [add](.\/add.md) * [count](.\/count.md) * [retrieve](.\/retrieve.md) ",
        "url": "1112-index"
    },
    "46": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 27 permalink: 1110-add --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossiers.add(); ``` ### Parameters **Return value** _Dossier_ The created, or newly added, Dossier object. ## Description The `add()` method creates a new Dossier scripting object that can serve as the basis for creating a new Dossier in Studio or Enterprise Server. Does not actually create the Dossier in Studio or Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1110-add"
    },
    "47": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 28 permalink: 1111-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossiers.count(); ``` ### Parameters **Return value** _number_ The number of Dossier objects in the collection. ## Description The `count()` method returns the number of Dossier objects within the Dossiers collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1111-count"
    },
    "48": {
        "title": "retrieve",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: retrieve sortid: 30 permalink: 1113-retrieve --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Dossiers.retrieve(objectId); ``` ### Parameters **objectId** _string_ The object ID of the Dossier to retrieve from the Studio or Enterprise Server system. **Return value** _Dossier_ The requested Dossier object. ## Description The `retrieve()` method retrieves a Dossier from the Studio or Enterprise Server system and adds it to the Dossiers collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1113-retrieve"
    },
    "49": {
        "title": "EntIssue",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntIssue sortid: 5 permalink: 1114-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1114-index"
    },
    "50": {
        "title": "EntIssue properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntIssue properties permalink: 1116-index --- Properties on the EntIssue object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1116-index"
    },
    "51": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 31 permalink: 1115-id --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntIssue.id; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The ID of the Issue. ## Description The `id` property is used to get the object ID of the Issue. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1115-id"
    },
    "52": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 33 permalink: 1117-name --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntIssue.name; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The name of the Issue. ## Description The `name` property is used to get the name of the Issue. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1117-name"
    },
    "53": {
        "title": "EntMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntMetaData sortid: 6 permalink: 1221-index --- EntMetaData is a scripting object that manages a collection of properties in the form of key value pairs. EntMetaData objects are proxy objects: changes to the EntMetaData scripting object are not applied directly to the underlying InDesign object. Instead, the changed metadata is kept in memory and used in actions towards the Studio or Enterprise Server system initiated from scripting. These actions do change the underlying InDesign objects and afterwards the EntMetaData object is updated. ### Keys The keys used for the properties in the EntMetaData are the same as the field name properties. For a complete overview, see the Action property in the Studio Admin Guide. Custom properties are identified by their name prefixed with \u2018C_\u2019. Below is a list with common properties, exceptions and sample values. |Key |Type |Description |Sample Value| |----|-----|------------|------------| |Core_ID |string |Object ID |\"123\"| |Core_Name |string |Name |\"32_Intro\"| |Core_Publication |string |Brand |\"WW News\"| |Core_Issue |string |Issue |\"2nd Issue\"| |Core_Section |string |Category |\"News\"| |Core_Basket |string |Status |\"Ready\"| |Type |string |Object Type |\"Article\", \"Image\"| |LockedBy |string |In use by |\"woodwing\"| |RouteTo |string |Routed to |\"woodwing\"| |Comment |string |Comment |\"This image needs retouching\"| |Format |string |Object Format |\"application\/indesign\"| |Editions |Array of string |Editions |[ \"North, \u201cSouth\" ]| |Deadline |string |Deadline |\"2007-11-05T18:00:00\"| |CopyrightMarked |string |Copyright Marked |\"false\"| |C_ACUSTOMPROP |string |Custom property 'A custom prop' |\"A value\"| ### Properties * [length](Properties\/length.md) ### Methods * [count](Methods\/count.md) * [get](Methods\/get.md) * [has](Methods\/has.md) * [item](Methods\/item.md) * [refresh](Methods\/refresh.md) * [remove](Methods\/remove.md) * [set](Methods\/set.md) ",
        "url": "1221-index"
    },
    "54": {
        "title": "EntMetaData methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntMetaData methods sortid: 37 permalink: 1225-index --- Methods on the [EntMetaData](..\/index.md) object. * [count](.\/count.md) * [get](.\/get.md) * [has](.\/has.md) * [item](.\/item.md) * [refresh](.\/refresh.md) * [remove](.\/remove.md) * [set](.\/set.md) ",
        "url": "1225-index"
    },
    "55": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 34 permalink: 1222-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.count(); ``` ### Parameters **Return value** _number_ The number of properties present in the metadata collection object. ## Description The `count()` method returns the number of properties present in the metadata collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1222-count"
    },
    "56": {
        "title": "get",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: get sortid: 35 permalink: 1223-get --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.get(key); ``` ### Parameters **key** _string_ The property key. **Return value** _string, Array of string, number, Array of number, boolean or Array of boolean_ The property value for the given key. If the key does not exist, an error will be thrown. ## Description The `get()` method returns the property value for the given key. ## Examples **Iterating metadata properties** ```javascript try { var doc = app.documents.item(0); \/\/ Access the document\u2019s metadata var md = doc.entMetaData; \/\/ Iterate the metadata keys and values for (var i = 0; i < md.length; ++i) { var keyValue = md.item(i); $.writeln(\"Key: [\" + keyValue[0] + \"], Value: [\" + keyValue[1] + \"]\"); } \/\/ Access the value of a specific key var mdName = md.get(\"Core_Name\"); $.writeln(\"Name: [\" + mdName + \"]\"); var mdID = md.item(\"Core_ID\"); $.writeln(\"ID: [\" + mdID + \"]\"); } catch (e) { desc = e.description; num = e.number; alert(\"error \" + num + \": \" + desc); } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1223-get"
    },
    "57": {
        "title": "has",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: has sortid: 36 permalink: 1224-has --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.has(key); ``` ### Parameters **key** _string_ The property key. **Return value** _boolean_ Returns if the property with the given key exists or not. ## Description The `has()` method returns if the property with the given key exists or not. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1224-has"
    },
    "58": {
        "title": "item",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: item sortid: 38 permalink: 1226-item --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.item(index); ``` ### Parameters **index** _number or string_ The index (number) or name (string) **Return value** _string, string[], number, number[], boolean or boolean[]_ The property value for the given index or key name. If the key does not exist, an error will be thrown. ## Description The `item()` method returns the property value for the given index or key name. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1226-item"
    },
    "59": {
        "title": "refresh",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: refresh sortid: 39 permalink: 1227-refresh --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.refresh(); ``` ### Parameters **Return value** The `refresh()` method does not return anything. ## Description The `refresh()` method refreshes the metadata in this scripting object with the metadata stored in the document. The refresh does not interact with the Studio or Enterprise Server system to retrieve the latest data, but relies on the data delivered to the application through the messaging subsystem. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1227-refresh"
    },
    "60": {
        "title": "remove",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: remove sortid: 40 permalink: 1228-remove --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.remove(key); ``` ### Parameters **key** _string_ The property key. **Return value** The `remove()` method does not return anything. ## Description The `remove()` method removes the property with the given key from the collection. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1228-remove"
    },
    "61": {
        "title": "set",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: set sortid: 41 permalink: 1229-set --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.set(key, value); ``` ### Parameters **key** _string_ The property key. **value** _string, Array of string, number, Array of number, boolean or Array of boolean_ The property value. **Return value** _number_ ## Description The `set()` method adds or changes the passed property. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1229-set"
    },
    "62": {
        "title": "EntMetaData properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntMetaData properties permalink: 1230-index --- Properties on the [EntMetaData](..\/index.md) object. * [length](.\/length.md)",
        "url": "1230-index"
    },
    "63": {
        "title": "length",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: length sortid: 42 permalink: 1231-length --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntMetaData.length; ``` ### Access _readonly_ ### Parameters **Return value** _number_ The number of properties present in the metadata collection object ## Description The `length` property is the number of properties present in the metadata collection object. ## Examples **Iterating metadata properties** ```javascript try { var doc = app.documents.item(0); \/\/ Access the document\u2019s metadata var md = doc.entMetaData; \/\/ Iterate the metadata keys and values for (var i = 0; i < md.length; ++i) { var keyValue = md.item(i); $.writeln(\"Key: [\" + keyValue[0] + \"], Value: [\" + keyValue[1] + \"]\"); } \/\/ Access the value of a specific key var mdName = md.get(\"Core_Name\"); $.writeln(\"Name: [\" + mdName + \"]\"); var mdID = md.item(\"Core_ID\"); $.writeln(\"ID: [\" + mdID + \"]\"); } catch (e) { desc = e.description; num = e.number; alert(\"error \" + num + \": \" + desc); } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1231-length"
    },
    "64": {
        "title": "EntPublication",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntPublication sortid: 7 permalink: 1118-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1118-index"
    },
    "65": {
        "title": "EntPublication properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntPublication properties permalink: 1120-index --- Properties on the EntPublication object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1120-index"
    },
    "66": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 43 permalink: 1119-id --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntPublication.id; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The ID of the Brand. ## Description The `id` property is used to get the ID of the Brand. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1119-id"
    },
    "67": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 44 permalink: 1121-name --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntPublication.name; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The name of the Issue. ## Description The `name` property is used to get the name of the Brand. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1121-name"
    },
    "68": {
        "title": "EntSection",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntSection sortid: 8 permalink: 1122-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1122-index"
    },
    "69": {
        "title": "EntSection properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntSection properties permalink: 1124-index --- Properties on the EntSection object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1124-index"
    },
    "70": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 45 permalink: 1123-id --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntSection.id; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The ID of the Category. ## Description The `id` property is used to get the ID of the Category. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1123-id"
    },
    "71": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 46 permalink: 1125-name --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript EntSection.name; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The name of the Category. ## Description The `name` property is used to get the name of the Category. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1125-name"
    },
    "72": {
        "title": "ManagedAdvert",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdvert sortid: 9 permalink: 1126-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md)",
        "url": "1126-index"
    },
    "73": {
        "title": "ManagedAdvert properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdvert properties permalink: 1128-index --- Properties on the ManagedAdvert object. * [entMetaData](.\/entMetaData.md) * [pageItems](.\/pageItem.md)",
        "url": "1128-index"
    },
    "74": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 47 permalink: 1127-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedAdvert.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the Advert. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1127-entMetaData"
    },
    "75": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 48 permalink: 1129-pageItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedAdvert.pageItem; ``` ### Access _readonly_ ### Parameters **Return value** _PageItem_ A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1129-pageItem"
    },
    "76": {
        "title": "ManagedAdverts",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdverts sortid: 10 permalink: 1130-index --- ### Methods * [count](Methods\/count.md)",
        "url": "1130-index"
    },
    "77": {
        "title": "ManagedAdverts methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdverts methods permalink: 1132-index --- Methods on the ManagedAdverts object. * [count](.\/count.md) ",
        "url": "1132-index"
    },
    "78": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 49 permalink: 1131-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedAdverts.count(); ``` ### Parameters **Return value** _number_ The number of ManagedAdvert objects in the collection. ## Description The `count()` method returns the number of ManagedAdvert objects within the ManagedAdverts collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1131-count"
    },
    "79": {
        "title": "ManagedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle sortid: 11 permalink: 1133-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [components](Properties\/components.md) ### Methods * [abortCheckOut](Methods\/abortCeckOut.md) * [checkIn](Methods\/checkIn.md) * [checkOut](Methods\/checkOut.md) * [create](Methods\/create.md) * [detach](Methods\/detach.md) * [detachComponent](Methods\/detachComponent.md) * [detachFrame](Methods\/detachFrame.md) * [refresh](Methods\/refresh.md) * [unplacedComponents](Methods\/unplacedComponents.md)",
        "url": "1133-index"
    },
    "80": {
        "title": "ManagedArticle methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle methods permalink: 1141-index --- Methods on the ManagedArticle object. * [abortCheckOut](.\/abortCeckOut.md) * [checkIn](.\/checkIn.md) * [checkOut](.\/checkOut.md) * [create](.\/create.md) * [detach](.\/detach.md) * [detachComponent](.\/detachComponent.md) * [detachFrame](.\/detachFrame.md) * [refresh](.\/refresh.md) * [unplacedComponents](.\/unplacedComponents.md)",
        "url": "1141-index"
    },
    "81": {
        "title": "abortCheckOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: abortCheckOut sortid: 50 permalink: 1134-abortCheckOut --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.abortCheckOut(); ``` ### Parameters **Return value** The `abortCheckOut()` method does not return anything. ## Description The `abortCheckOut()` method cancels the check-out of the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1134-abortCheckOut"
    },
    "82": {
        "title": "checkIn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkIn sortid: 51 permalink: 1135-checkIn --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.checkIn(); ``` ### Parameters **pageItems** _PageItem[] (Optional)_ The page items that will be additionally added to the Article. **Return value** The `checkIn()` method does not return anything. ## Description The `checkIn()` method checks-in the placed Article in the Studio or Enterprise Server system. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1135-checkIn"
    },
    "83": {
        "title": "checkOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkOut sortid: 52 permalink: 1136-checkOut --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.checkOut(); ``` ### Parameters **Return value** The `checkOut()` method does not return anything. ## Description The `checkOut()` method checks-out the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1136-checkOut"
    },
    "84": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 53 permalink: 1137-create --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.create(pageItems [, stationary]); ``` ### Parameters **pageItems** _PageItem[]_ The Page items that will form the Article. **stationary** _boolean (Optional)_ If set to `true`, an Article Template will be created instead of an Article. Default is `false`. **Return value** The `create()` method does not return anything. ## Description The `create()` method creates a placed Article from the given page items. Depending on the system configuration, the given page item can contain images which become part of the Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1137-create"
    },
    "85": {
        "title": "detach",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detach sortid: 54 permalink: 1138-detach --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.detach(); ``` ### Parameters **Return value** The `detach()` method does not return anything. ## Description The `detach()` method detaches the Article from the Layout. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1138-detach"
    },
    "86": {
        "title": "detachComponent",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detachComponent sortid: 55 permalink: 1139-detachComponent --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.detachComponent(pageItem); ``` ### Parameters **pageItem** _PageItem, Story_ Page item, or Story, that needs to be removed from the multi-component Article. **Return value** The `detachComponent()` method does not return anything. ## Description The `detachComponent()` method detaches a component from the layout and deletes the component from a multi-component Article. The last placed component of the Article cannot be detached and deleted using this method. The functionality is similar to the 'Detach and Delete Component from Article' menu. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1139-detachComponent"
    },
    "87": {
        "title": "detachFrame",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detachFrame sortid: 56 permalink: 1140-detachFrame --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.detachFrame(pageItem); ``` ### Parameters **pageItems** _PageItem[]_ The page items that will be detached from the article. If the passed page item is the last placed component of the Article the Error Code \"The object cannot be detached.\" will be returned. **Return value** The `detachFrame()` method does not return anything. ## Description The `detachFrame()` method detaches frames from a multi-component Article. The last placed component of the Article cannot be detached using this method. The functionality is similar to the 'Detach Component' menu. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1140-detachFrame"
    },
    "88": {
        "title": "refresh",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: refresh sortid: 57 permalink: 1142-refresh --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.refresh(); ``` ### Parameters **Return value** The `refresh()` method does not return anything. ## Description The `refresh()` method updates the content of the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1142-refresh"
    },
    "89": {
        "title": "unplacedComponents",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: unplacedComponents sortid: 58 permalink: 1143-unplacedComponents --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.unplacedComponents(); ``` ### Parameters **Return value** _string[]_ A list of GUIDs. ## Description The `unplacedComponents()` method returns a list of GUIDs of the components that are not placed on the current Layout. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1143-unplacedComponents"
    },
    "90": {
        "title": "ManagedArticle properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle properties permalink: 1146-index --- Properties on the ManagedArticle object. * [entMetaData](.\/entMetaData.md) * [components](.\/components.md)",
        "url": "1146-index"
    },
    "91": {
        "title": "components",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: components sortid: 59 permalink: 1144-components --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.components; ``` ### Access _readonly_ ### Parameters **Return value** _PageItem[], Story_ An array of PageItem objects or a Story. ## Description The `components` property is used to get access to the InDesign page items and stories that are the components of the current Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1144-components"
    },
    "92": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 60 permalink: 1145-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticle.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1145-entMetaData"
    },
    "93": {
        "title": "ManagedArticles",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticles sortid: 12 permalink: 1147-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md)",
        "url": "1147-index"
    },
    "94": {
        "title": "ManagedArticles methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticles methods permalink: 1150-index --- Methods on the ManagedArticles object. * [add](.\/add.md) * [count](.\/count.md) ",
        "url": "1150-index"
    },
    "95": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 61 permalink: 1148-add --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticles.add(); ``` ### Parameters **Return value** _ManagedArticle_ The created, or newly added, MangedArticle object. ## Description The `add()` method creates a new ManagedArticle scripting object that can serve as the basis for creating a new Article in Studio or Enterprise Server. Does not actually create the Article in Studio or Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1148-add"
    },
    "96": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 62 permalink: 1149-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedArticles.count(); ``` ### Parameters **Return value** _number_ The number of ManagedArticle objects in the collection. ## Description The `count()` method returns the number of ManagedArticle objects within the ManagedArticles collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1149-count"
    },
    "97": {
        "title": "ManagedImage",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage sortid: 13 permalink: 1400-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md) ### Methods * [checkIn](Methods\/checkIn.md) * [checkOut](Methods\/checkOut.md) * [create](Methods\/create.md) ",
        "url": "1400-index"
    },
    "98": {
        "title": "ManagedImage methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage methods permalink: 1404-index --- Methods on the ManagedImage object. * [checkIn](.\/checkIn.md) * [checkOut](.\/checkOut.md) * [create](.\/create.md) ",
        "url": "1404-index"
    },
    "99": {
        "title": "checkIn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkIn sortid: 63 permalink: 1401-checkIn --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImage.checkIn(); ``` ### Parameters **Return value** The `checkIn()` method does not return anything. ## Description The `checkIn()` method checks-in the placed Image in the Studio Server system. ## Examples **Example title** ```javascript var doc = app.activeDocument; var managedImages = doc.managedImages; var im; var md; var core_name; var id; for(i=0; i<managedImages.length; i++) { im = managedImages[i]; md = im.entMetaData; core_name = md.get( \"Core_Name\"); id = doc.entMetaData.get(\"Core_ID\"); alert( \"image name = [\" + core_name + \"] ; document id = [\" + id + \"]\"); im.checkOut(); alert( \"Now update the image in the woodwing.noindex folder\"); im.checkIn(); } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | | | 2023 | | | 2024 | 19.0.1+ \u2714 | | 2025 | \u2714 | ",
        "url": "1401-checkIn"
    },
    "100": {
        "title": "checkOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkOut sortid: 64 permalink: 1402-checkOut --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImage.checkOut(); ``` ### Parameters **Return value** The `checkOut()` method does not return anything. ## Description The `checkOut()` method checks-out the placed Image. Note 1: The InDesign user interface is not capable of handling\/showing checked out images. It is e.g. not possible to check out and check in images by using the interface, besides during an Edit Original operation. We advise to not use this function. Note 2: After using this call you are also responsible to call checkIn to check the image back in. ## Examples **Example title** ```javascript var doc = app.activeDocument; var managedImages = doc.managedImages; var im; var md; var core_name; var id; for(i=0; i<managedImages.length; i++) { im = managedImages[i]; md = im.entMetaData; core_name = md.get( \"Core_Name\"); id = doc.entMetaData.get(\"Core_ID\"); alert( \"image name = [\" + core_name + \"] ; document id = [\" + id + \"]\"); im.checkOut(); alert( \"Now update the image in the woodwing.noindex folder\"); im.checkIn(); } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | | | 2023 | | | 2024 | 19.0.1+ \u2714 | | 2025 | \u2714 | ",
        "url": "1402-checkOut"
    },
    "101": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 65 permalink: 1403-create --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImage.create(pageItem); ``` ### Parameters **pageItems** _PageItem_ The Page item of which the image will be created. **Return value** The `create()` method does not return anything. ## Description The `create()` method creates an image from the given page item in the Studio or Enterprise Server system. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1403-create"
    },
    "102": {
        "title": "ManagedImage properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage properties permalink: 1406-index --- Properties on the ManagedImage object. * [entMetaData](.\/entMetaData.md) * [items](.\/pageItem.md)",
        "url": "1406-index"
    },
    "103": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 66 permalink: 1405-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImage.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the image. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1405-entMetaData"
    },
    "104": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 67 permalink: 1407-pageItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImage.pageItem; ``` ### Access _readonly_ ### Parameters **Return value** _PageItem_ A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1407-pageItem"
    },
    "105": {
        "title": "ManagedImages",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImages sortid: 14 permalink: 1157-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md)",
        "url": "1157-index"
    },
    "106": {
        "title": "ManagedImages methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImages methods permalink: 1160-index --- Methods on the ManagedImages object. * [add](.\/add.md) * [count](.\/count.md) ",
        "url": "1160-index"
    },
    "107": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 6600 permalink: 1158-add --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImages.add(); ``` ### Parameters **Return value** _ManagedImage_ The created, or newly added, MangedImage object. ## Description The `add()` method creates a new ManagedImage scripting object that can serve as the basis for creating a new image in Studio or Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1158-add"
    },
    "108": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 6700 permalink: 1159-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedImages.count(); ``` ### Parameters **Return value** _number_ The number of ManagedImage objects in the collection. ## Description The `count()` method returns the number of ManagedImage objects within the ManagedImages collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1159-count"
    },
    "109": {
        "title": "ManagedLayoutModule",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModule sortid: 15 permalink: 1161-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md)",
        "url": "1161-index"
    },
    "110": {
        "title": "ManagedLayoutModule properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModule properties permalink: 1163-index --- Properties on the ManagedLayoutModule object. * [entMetaData](.\/entMetaData.md) * [pageItems](.\/pageItem.md)",
        "url": "1163-index"
    },
    "111": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 68 permalink: 1162-entMetaData --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedLayoutModule.entMetaData; ``` ### Access _readonly_ ### Parameters **Return value** _EntMetaData_ An EntMetaData object. ## Description The `entMetaData` property is used to get the Studio or Enterprise Server metadata associated with the Layout Module. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-entMetaData"
    },
    "112": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 69 permalink: 1164-pageItem --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedLayoutModule.pageItem; ``` ### Access _readonly_ ### Parameters **Return value** _PageItem_ A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1164-pageItem"
    },
    "113": {
        "title": "ManagedLayoutModules",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModules sortid: 16 permalink: 1165-index --- ### Methods * [count](Methods\/count.md)",
        "url": "1165-index"
    },
    "114": {
        "title": "ManagedLayoutModules methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModules methods permalink: 1167-index --- Methods on the ManagedLayoutModules object. * [count](.\/count.md) ",
        "url": "1167-index"
    },
    "115": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 70 permalink: 1166-count --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript ManagedLayoutModules.count(); ``` ### Parameters **Return value** _number_ The number of ManagedLayoutModules objects in the collection. ## Description The `count()` method returns the number of ManagedLayoutModule objects within the ManagedLayoutModules collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1166-count"
    },
    "116": {
        "title": "PageItem",
        "author": "",
        "category": "",
        "content": "--- layout: section title: PageItem sortid: 17 permalink: 1232-index --- ### Properties * [editions](Properties\/editions.md) * [elementLabel](Properties\/elementLabel.md) * [managedArticle](Properties\/managedArticle.md) * [managedImage](Properties\/managedImage.md) * [managedAdvert](Properties\/managedAdvert.md) * [managedLayoutModule](Properties\/managedLayoutModule.md) * [allIndesignArticleIds](Properties\/allIndesignArticleIds.md) ### Methods * [placeObject](Methods\/placeObject.md) * [updateCaptionAndCredit](Methods\/updateCaptionAndCredit.md) ",
        "url": "1232-index"
    },
    "117": {
        "title": "PageItem methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: PageItem methods sortid: 71 permalink: 1233-index --- Methods on the PageItem object. * [placeObject](.\/placeObject.md) * [updateCaptionAndCredit](.\/updateCaptionAndCredit.md) ",
        "url": "1233-index"
    },
    "118": {
        "title": "placeObject",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: placeObject sortid: 72 permalink: 1234-placeObject --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.placeObject(id [, componentId] [, fileType]); ``` ### Parameters **id** _string_ The object\u2019s id **componentId** _string_ (Optional) The component\u2019s id **fileType** _string_ (Optional) The object\u2019s type. **Return value** The `placeObject()` method does not return anything. ## Description The `placeObject()` method places a Studio or Enterprise Server object in the target object. The contentType of the target object must match the source object\u2019s. For images, ads, layout modules and image article components the contentType must be _ContentType.GRAPHIC_TYPE_. For text article components the contentType must be _ContentType.TEXT_TYPE_. When placing articles, either the component id must be given of the article component, or the article must be a single component article; else the place will fail. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1234-placeObject"
    },
    "119": {
        "title": "updateCaptionAndCredit",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updateCaptionAndCredit sortid: 73 permalink: 1168-updateCaptionAndCredit --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.updateCaptionAndCredit(); ``` ### Parameters **Return value** The `updateCaptionAndCredit()` method does not return anything. ## Description The `updateCaptionAndCredit()` method updates the caption and\/or credit information of Smart Images. If the Page Item is a Smart Image, both Credit and Caption will be updated (when not locked). If the Page Item is a Credit of a Smart Image its Credit information will be updated (when not locked). If the Page Item is a Caption of a Smart Image its Caption information will be updated (when not locked). ## Examples **Example title** The sample will show how to update the credit and\/or caption values on specific frames. ```javascript try { var myDoc = doc.documents.item(0); \/\/ Update the Caption and Credit on an image item. var myGraphic = myDoc.allGraphics[0]; myGraphic.updateCaptionAndCredit(); \/\/ Update the Caption and Credit on a spline item. var myFrame = myDoc.pageItems.item(0); myFrame.updateCaptionAndCredit(); \/\/ Update the Caption of a spline item. var myCaptionFrame = myDoc.pageItems.item(1); myCaptionFrame.updateCaptionAndCredit(); \/\/ Update the Credit of a spline item. var myCreditFrame = myDoc.pageItems.item(2); myCreditFrame.updateCaptionAndCredit(); } catch (e) { desc = e.description; num = e.number; alert(\"error \" + num + \": \" + desc); } ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1168-updateCaptionAndCredit"
    },
    "120": {
        "title": "PageItem properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: PageItem properties permalink: 1238-index --- Properties on the PageItem object. * [editions](.\/editions.md) * [elementLabel](.\/elementLabel.md) * [managedArticle](.\/managedArticle.md) * [managedImage](.\/managedImage.md) * [managedAdvert](.\/managedAdvert.md) * [managedLayoutModule](.\/managedLayoutModule.md) * [allIndesignArticleIds](.\/allIndesignArticleIds.md) ",
        "url": "1238-index"
    },
    "121": {
        "title": "allIndesignArticleIds",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: allIndesignArticleIds sortid: 74 permalink: 1235-allIndesignArticleIds --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.allIndesignArticleIds; ``` ### Access _readonly_ ### Parameters **Return value** _Array of String_ The IDs of all InDesign Articles to which the page item belongs. ## Description Returns the IDs of all InDesign Articles to which the page item belongs. The IDs of InDesign Articles that contain a parent group item of the page item will also be returned. This differs from the PageItem.allArticles call. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1235-allIndesignArticleIds"
    },
    "122": {
        "title": "editions",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: editions sortid: 75 permalink: 1236-editions --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.editions; ``` ### Access _read\/write_ ### Parameters **Return value** _Array of string_ A string of Edition names. ## Description The Editions assigned to the page item. When assigning to a text frame, all linked text frames will get the same set of Editions assigned. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1236-editions"
    },
    "123": {
        "title": "elementLabel",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: elementLabel sortid: 76 permalink: 1237-elementLabel --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.elementLabel; ``` ### Access _read\/write_ ### Parameters **Return value** _string_ The name of the Element Label. ## Description The Element Label assigned to the page item. When assigning to a text frame, all threaded text frames will get the same Element Label. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1237-elementLabel"
    },
    "124": {
        "title": "managedAdvert",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedAdvert sortid: 77 permalink: 1169-managedAdvert --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.managedAdvert; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedAdvert_ A ManagedAdvert object. ## Description Access to the associated ManagedAdvert scripting object. Returns nothing if there is no object associated. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1169-managedAdvert"
    },
    "125": {
        "title": "managedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticle sortid: 78 permalink: 1170-managedArticle --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.managedArticle; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedArticle_ A ManagedArticle object. ## Description Access to the associated ManagedArticle scripting object. Returns nothing if there is no object associated. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1170-managedArticle"
    },
    "126": {
        "title": "managedImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedImage sortid: 79 permalink: 1171-managedImage --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.managedImage; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedImage_ A ManagedImage object. ## Description Access to the associated ManagedImage scripting object. Returns nothing if there is no object associated. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1171-managedImage"
    },
    "127": {
        "title": "managedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticle sortid: 80 permalink: 1172-managedLayoutModule --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript PageItem.managedArticle; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedArticle_ A ManagedArticle object. ## Description Access to the associated ManagedArticle scripting object. Returns nothing if there is no object associated. ## Examples **Example title** ```javascript ``` ## Support versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1172-managedLayoutModule"
    },
    "128": {
        "title": "Session",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Session sortid: 18 permalink: 1069-index --- The object representing the Studio or Enterprise Server session. ### Properties * [activeServer](.\/Properties\/activeServer.md) * [activeTicket](.\/Properties\/activeTicket.md) * [activeUrl](.\/Properties\/activeUrl.md) * [activeUser](.\/Properties\/activeUser.md) ### Methods * [forkLogin](.\/Methods\/forkLogin.md) * [getCategories](.\/Methods\/getCategories.md) * [getCategory](.\/Methods\/getCategory.md) * [getIssue](.\/Methods\/getIssue.md) * [getIssues](.\/Methods\/getIssues.md) * [getPublication](.\/Methods\/getPublication.md) * [getPublications](.\/Methods\/getPublications.md) * [getServers](.\/Methods\/getServers.md) * [getTerm](.\/Methods\/getTerm.md) * [getUserGroups](.\/Methods\/getUserGroups.md) * [getUsers](.\/Methods\/getUsers.md) * [login](.\/Methods\/login.md) * [logout](.\/Methods\/logout.md) * [reLogin](.\/Methods\/reLogin.md)",
        "url": "1069-index"
    },
    "129": {
        "title": "Session methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Session methods permalink: 1217-index --- Methods on the Session object. * [forkLogin](.\/forkLogin.md) * [getCategories](.\/getCategories.md) * [getCategory](.\/getCategory.md) * [getIssue](.\/getIssue.md) * [getIssues](.\/getIssues.md) * [getPublication](.\/getPublication.md) * [getPublications](.\/getPublications.md) * [getServers](.\/getServers.md) * [getTerm](.\/getTerm.md) * [getUserGroups](.\/getUserGroups.md) * [getUsers](.\/getUsers.md) * [login](.\/login.md) * [logout](.\/logout.md) * [reLogin](.\/reLogin.md) ",
        "url": "1217-index"
    },
    "130": {
        "title": "forkLogin",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: forkLogin sortid: 81 permalink: 1206-forkLogin --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.forkLogin(username, ticket, server, quick, requestInfo, serverUrl, sso); ``` ### Parameters **username** _string_ The user name. **ticket** _string_ The ticket of the existing login. **server** _string_ Name of the location to log in to. This is the name of the entry in the server list of the WWSettings.xml file. **quick** _boolean (Optional)_ Boolean that indicates if the login to the Studio or Enterprise Server system should be performed without retrieving session information or not. Default is false. **requestInfo** _Array of string (Optional)_ The list of request information that should be obtained with the logon. When not specified all information will be requested. **serverUrl** _string (Optional, since 16.3.3 and 17.0.1)_ URL that provides access to the Studio Server from InDesign, InCopy or InDesign Server. If the URL is not specified or empty, then the name of the server will be looked up in WWSettings.xml using the server parameter. **sso** _boolean (Optional, since 16.3.3 and 17.0.1)_ Boolean that indicates if the login to the Studio Server system using the serverURL should be tried using the SSO protocol or not. If the `serverURL` is not specified or empty, then the server URL is looked up in WWSettings.xml together with the \u2018sso\u2019 attribute. The `sso` parameter ignored in that case. The default value is `true`. Note that on InDesign Server SSO is always ignored. As a consequence the sso parameter will not have any effect on InDesign Server. **Return value** The `forkLogin()` method does not return anything. It throws an exception in case of an error. ## Description The `forkLogin()` method performs a login to the Studio or Enterprise Server system based on an existing login. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ### Single Sign-On The `forkLogin()` scripting call does not support Single Sign-On (SSO). When running the login scripting call on InDesign Server, SSO is always ignored for SSO enabled application servers. In InDesign and InCopy, without specifying the `serverUrl` parameter, the `forkLogin()` scripting call will only work on SSO enabled application servers if the `sso` attribute is set to \u201cfalse\u201d for the corresponding server definition in WWSettings.xml. Since Studio for InDesign and InCopy 16.3.3 and 17.0.1: If the `serverUrl` parameter is provided, then the `sso` parameter in the scripting call should be set to \u201cfalse\u201d to login to an sso enabled Studio Server. ",
        "url": "1206-forkLogin"
    },
    "131": {
        "title": "getCategories",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getCategories sortid: 82 permalink: 1207-getCategories --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getCategories(brandName, issueName); ``` ### Parameters **publication** _string_ The name of the Brand. **issue** _string (Optional)_ The name of the overruled Issue. **Return value** _Array of [EntSection](..\/..\/EntSection\/index.md)_ Returns a list of all Categories of the provided Brand and Issue. ## Description The `getCategories()` method returns a list of all Categories of the provided Brand and Issue. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1207-getCategories"
    },
    "132": {
        "title": "getCategory",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getCategory sortid: 83 permalink: 1208-getCategory --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getCategory(brandName, categoryName, issueName); ``` ### Parameters **publication** _string_ The name of the Brand. **category** _string_ The name of the Category.. **issue** _string (Optional)_ The name of the overruled Issue. **Return value** _[EntSection](..\/..\/EntSection\/index.md)_ Returns the Category with the provided name. Throws an exception if the Category does not exist. ## Description The `getCategory()` method returns the Category with the provided name. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1208-getCategory"
    },
    "133": {
        "title": "getIssue",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getIssue sortid: 84 permalink: 1209-getIssue --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getIssue(brandName, issueName); ``` ### Parameters **brandName** _string_ The name of the Brand. **issueName** _string_ The name of the Issue. **Return value** _[EntIssue](..\/..\/EntIssue\/index.md)_ The EntIssue object on the Studio Server. ## Description The `getIssue()` method returns an EntIssue object from the Studio Server for the provided Brand name and Issue name. If the object does not exist it will throw an exception. ## Examples **Example title** ```javascript var entIssue = app.entSession.getIssue(\"WW News\", \"1st Issue\"); \/\/ Return value: { id: \"1\", name: \"1st Issue\" } ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1209-getIssue"
    },
    "134": {
        "title": "getIssues",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getIssues sortid: 85 permalink: 1210-getIssues --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getIssues(brandName); ``` ### Parameters **brandName** _string_ The name of the Brand. **Return value** _Array of [Issue](..\/..\/EntIssue\/index.md)_ Returns a list of all Issues of the provided Brand. ## Description The `getIssues()` method returns a list of all Issues of the provided Brand. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1210-getIssues"
    },
    "135": {
        "title": "getPublication",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getPublication sortid: 86 permalink: 1211-getPublication --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getPublication(brandName); ``` ### Parameters **publication** _string_ The name of the Brand. **Return value** _[Publication](..\/..\/EntPublication\/index.md)_ Returns the Brand with the provided name. Throws an exception if the Brand does not exist. ## Description The `getPublication()` method returns the Brand with the provided name. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1211-getPublication"
    },
    "136": {
        "title": "getPublications",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getPublications sortid: 87 permalink: 1212-getPublications --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getPublications(); ``` ### Parameters **Return value** _Array of [Publication](..\/..\/EntPublication\/index.md)_ The returned array contains a list of all Brands of the current server. ## Description The `getPublications()` method returns a list of all Brands of the current server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1212-getPublications"
    },
    "137": {
        "title": "getServers",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getServers sortid: 88 permalink: 1213-getServers --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getServers(); ``` ### Parameters **Return value** _Array of Array of string_ The returned array contains arrays of two strings: the display name and the URL of the server. ## Description The `getServers()` method returns a list of servers from the WWSettings.xml file that can be used to login to. The dynamically retrieved server list is currently not supported by this scripting call. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1213-getServers"
    },
    "138": {
        "title": "getTerm",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getTerm sortid: 89 permalink: 1214-getTerm --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getTerm(term); ``` ### Parameters **term** _string_ The UI term. **Return value** _string_ The `getTerm()` method returns the display value of the system term ## Description The `getTerm()` method returns the display value of several terms used in the system. Can be used for creating custom UI. For further information on changing terminology including a list of supported terms, see the Admin Guide. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1214-getTerm"
    },
    "139": {
        "title": "getUserGroups",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getUserGroups sortid: 90 permalink: 1215-getUserGroups --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getUserGroups(); ``` ### Parameters **Return value** _Array of string_ The returned array is a list of user group names. ## Description The `getUserGroups()` method returns a list of user group names. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1215-getUserGroups"
    },
    "140": {
        "title": "getUsers",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getUsers sortid: 91 permalink: 1216-getUsers --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.getUsers(); ``` ### Parameters **Return value** _Array of Array of string_ The returned array contains arrays of two strings: the user\u2019s short name and the user\u2019s full name. ## Description The `getUsers()` method returns a list of users. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1216-getUsers"
    },
    "141": {
        "title": "login",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: login sortid: 92 permalink: 1218-login --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.login(username, password, server, requestInfo, serverUrl, sso); ``` ### Parameters **username** _string_ The user name. **password** _string_ The password. **server** _string_ Name of the location to log in to. This is the name of the entry in the server list of the WWSettings.xml file. **requestInfo** _Array of string (Optional)_ The list of request information that should be obtained with the logon. When not specified all information will be requested. **serverUrl** _string (Optional, since 16.3.3 and 17.0.1)_ URL that provides access to the Studio Server from InDesign, InCopy or InDesign Server. If the URL is not specified or empty, then the name of the server will be looked up in WWSettings.xml using the server parameter. **sso** _boolean (Optional, since 16.3.3 and 17.0.1)_ Boolean that indicates if the login to the Studio Server system using the serverURL should be tried using the SSO protocol or not. If the `serverURL` is not specified or empty, then the server URL is looked up in WWSettings.xml together with the \u2018sso\u2019 attribute. The `sso` parameter ignored in that case. The default value is `true`. Note that on InDesign Server SSO is always ignored. As a consequence the sso parameter will not have any effect on InDesign Server. **Return value** The `login()` method does not return anything. It throws an exception in case of an error. ## Description The `login()` method performs a login to the Studio or Enterprise Server system. ## Examples **Login with servername** ```javascript app.entSession.login(\"John\", \"JohnsPassword\", \"localserver\"); ``` **Login with URL (since 16.3.3 \/ 17.0.1)** ```javascript app.entSession.login( \"John\", \"JohnsPassword\", \"\", new Array(), \"https:\/\/localhost:8888\/StudioServer\/index.php\", false ); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ### Single Sign-On The `login()` scripting call does not support Single Sign-On (SSO). When running the login scripting call on InDesign Server, SSO is always ignored for SSO enabled application servers. In InDesign and InCopy, without specifying the `serverUrl` parameter, the `login()` scripting call will only work on SSO enabled application servers if the `sso` attribute is set to \u201cfalse\u201d for the corresponding server definition in WWSettings.xml. Since Studio for InDesign and InCopy 16.3.3 and 17.0.1: If the `serverUrl` parameter is provided, then the `sso` parameter in the scripting call should be set to \u201cfalse\u201d to login to an sso enabled Studio Server. ",
        "url": "1218-login"
    },
    "142": {
        "title": "logout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: logout sortid: 93 permalink: 1219-logout --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.logout(); ``` ### Parameters **Return value** The `logout()` method does not return anything. It throws an exception in case of an error. ## Description The `logout()` method performs a logout from the Studio or Enterprise Server system. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1219-logout"
    },
    "143": {
        "title": "reLogin",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: reLogin sortid: 94 permalink: 1220-reLogin --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.reLogin(); ``` ### Parameters **Return value** The `reLogin()` method does not return anything. It throws an exception in case of an error. ## Description The `reLogin()` method performs a re-login to the Studio or Enterprise Server system. Useful when changes were made to the configuration, workflow, etc on the server and those value are returned during the login. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ### Single Sign-On When logging in on servers which have Single Sign-On (SSO) enabled, the `reLogin()` call will not work on clients except for InDesign Server. SSO is available for all versions of Studio and the following versions of Studio for InDesign and InCopy: ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1220-reLogin"
    },
    "144": {
        "title": "Session properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Session properties permalink: 1072-index --- Properties on the Session object. * [activeServer](.\/activeServer.md) * [activeTicket](.\/activeTicket.md) * [activeUrl](.\/activeUrl.md) * [activeUser](.\/activeUser.md)",
        "url": "1072-index"
    },
    "145": {
        "title": "activeServer",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeServer sortid: 95 permalink: 1070-activeServer --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.activeServer; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The display name of the active serer. ## Description The `activeServer` property is used to get the display name of the server used for the current session. It returns empty when not logged in. The name of the server will have the value of the `name` property of the `<SCEnt:ServerInfo\/>` tag in the WWSettings.xml file. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the server name used for the current session** When `activeServer` is empty, there is no active session. ```javascript \/\/ Get the server name used for the current session. var sessionObject = app.entSession; var serverName = sessionObject.activeServer; \/\/ Given in WWSettings '<SCEnt:ServerInfo name=\"Studio v10.5.0\" url=\"https:\/\/server.company.net\/studio\/index.php\"\/>' \/\/ serverUrl is now 'Studio v10.5.0'. ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [entSession](..\/..\/Application\/Properties\/entSession.md) ",
        "url": "1070-activeServer"
    },
    "146": {
        "title": "activeTicket",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeTicket sortid: 96 permalink: 1071-activeTicket --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.activeTicket; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The ticket of the current session. ## Description The `activeTicket` property is used to get the ticket of the current session. It returns empty when not logged in. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the active ticket used for the current session** When `activeTicket` is empty, there is no active session. ```javascript \/\/ Get the active ticket used for the current session. var sessionObject = app.entSession; var logonTicket = sessionObject.activeTicket; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [entSession](..\/..\/Application\/Properties\/entSession.md) ",
        "url": "1071-activeTicket"
    },
    "147": {
        "title": "activeUrl",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeUrl sortid: 97 permalink: 1074-activeUrl --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.activeUrl; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The URL of the active server. ## Description The `activeUrl` property is used to get the URL of the server for the current session. It returns empty when not logged in. The URL of the server will have the value of the `url` property of the `<SCEnt:ServerInfo\/>` tag in the WWSettings.xml file. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the URL of the server for the current session** When `activeUrl` is empty, there is no active session. ```javascript \/\/ Get the URL of the server for the current session. var sessionObject = app.entSession; var serverUrl = sessionObject.activeUrl; \/\/ Given in WWSettings '<SCEnt:ServerInfo name=\"Studio v10.5.0\" url=\"https:\/\/server.company.net\/studio\/index.php\"\/>' \/\/ serverUrl is now 'https:\/\/server.company.net\/studio\/index.php'. ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [entSession](..\/..\/Application\/Properties\/entSession.md) ",
        "url": "1074-activeUrl"
    },
    "148": {
        "title": "activeUser",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeUser sortid: 98 permalink: 1075-activeUser --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Session.activeUser; ``` ### Access _readonly_ ### Parameters **Return value** _string_ The (short) user name. ## Description The `activeUser` property is used to get the user's short name of the user currently logged in. It returns empty when not logged in. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the name of the user currently logged in** When `activeUser` is empty, there is no active session. ```javascript \/\/ Get the name of the user currently logged in. var sessionObject = app.entSession; var userShortName = sessionObject.activeUser; \/\/ userShortName is now 'Joe'. ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [entSession](..\/..\/Application\/Properties\/entSession.md) ",
        "url": "1075-activeUser"
    },
    "149": {
        "title": "StudioDocumentPreference",
        "author": "",
        "category": "",
        "content": "--- layout: section title: StudioDocumentPreference sortid: 18 permalink: 1304-index --- The object representing the Studio Document preferences. ### Properties * [applyObjectStyle](.\/Properties\/applyObjectStyle.md) ",
        "url": "1304-index"
    },
    "150": {
        "title": "StudioDocumentPreference properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: StudioDocumentPreference properties permalink: 1303-index --- Properties on the StudioDocumentPreference object. * [applyObjectStyle](.\/applyObjectStyle.md) ",
        "url": "1303-index"
    },
    "151": {
        "title": "applyObjectStyle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: applyObjectStyle sortid: 68 permalink: 1162-applyObjectStyle --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioDocumentPreference.applyObjectStyle; ``` ### Access _read\/write_ ### Parameters **Return value** _ApplyObjectStyleOptions_ An ApplyObjectStyleOptions enum value (see below). ## Description The `applyObjectStyle` property defines if and when an object style should be automatically applied to an article. Use one of the following options: | Value | Description | | ----------------------------------------------------- | --------------------------------------------------------------------------------------- | | ApplyObjectStyleOptions.APPLY_DURING_CREATE_AND_PLACE | Only apply the object style when creating or placing the article, not when updating it. | | ApplyObjectStyleOptions.REAPPLY_WHEN_UPDATING | Always apply the object style. | | ApplyObjectStyleOptions.DO_NOT_APPLY | Never apply the object style. | The default value is ApplyObjectStyleOptions.APPLY_DURING_CREATE_AND_PLACE. ## Examples **Set the \"Apply Object Style\" preference to \"Do Not Apply\" for the active Document** ```javascript app.activeDocument.studioDocumentPreferences.applyObjectStyle = ApplyObjectStyleOptions.DO_NOT_APPLY; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-applyObjectStyle"
    },
    "152": {
        "title": "StudioPreference",
        "author": "",
        "category": "",
        "content": "--- layout: section title: StudioPreference sortid: 18 permalink: 1302-index --- The object representing the Studio preferences. ### Properties * [applyObjectStyle](.\/Properties\/applyObjectStyle.md) * [autoAddPlacedAssetsImageToStudio](.\/Properties\/autoAddPlacedAssetsImageToStudio.md) * [bringInCopyArticlesToFrontInLayoutView](.\/Properties\/bringInCopyArticlesToFrontInLayoutView.md) * [displayLayoutNameInCreateArticle](.\/Properties\/displayLayoutNameInCreateArticle.md) * [documentPaneFontSize](.\/Properties\/documentPaneFontSize.md) * [dossierPanelShowRelatedDossiers](.\/Properties\/dossierPanelShowRelatedDossiers.md) * [enableSmartCaching](.\/Properties\/enableSmartCaching.md) * [playSoundWhenRoutingMessageArrives](.\/Properties\/playSoundWhenRoutingMessageArrives.md) * [previewPaneFontSize](.\/Properties\/previewPaneFontSize.md) * [showImportOptionsDialogOnPlace](.\/Properties\/showImportOptionsDialogOnPlace.md) * [showRoutingMessageAlert](.\/Properties\/showRoutingMessageAlert.md) * [updatePlacedImagesWhenOpeningLayout](.\/Properties\/updatePlacedImagesWhenOpeningLayout.md) ",
        "url": "1302-index"
    },
    "153": {
        "title": "StudioPreference properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: StudioPreference properties permalink: 1301-index --- Properties on the StudioPreference object. * [applyObjectStyle](.\/applyObjectStyle.md) * [autoAddPlacedAssetsImageToStudio](.\/autoAddPlacedAssetsImageToStudio.md) * [bringInCopyArticlesToFrontInLayoutView](.\/bringInCopyArticlesToFrontInLayoutView.md) * [displayLayoutNameInCreateArticle](.\/displayLayoutNameInCreateArticle.md) * [documentPaneFontSize](.\/documentPaneFontSize.md) * [dossierPanelShowRelatedDossiers](.\/dossierPanelShowRelatedDossiers.md) * [enableSmartCaching](.\/enableSmartCaching.md) * [playSoundWhenRoutingMessageArrives](.\/playSoundWhenRoutingMessageArrives.md) * [previewPaneFontSize](.\/previewPaneFontSize.md) * [showImportOptionsDialogOnPlace](.\/showImportOptionsDialogOnPlace.md) * [showRoutingMessageAlert](.\/showRoutingMessageAlert.md) * [updatePlacedImagesWhenOpeningLayout](.\/updatePlacedImagesWhenOpeningLayout.md) ",
        "url": "1301-index"
    },
    "154": {
        "title": "applyObjectStyle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: applyObjectStyle sortid: 68 permalink: 1162-applyObjectStyle --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioPreference.applyObjectStyle; ``` ### Access _read\/write_ ### Parameters **Return value** _ApplyObjectStyleOptions_ An ApplyObjectStyleOptions enum value (see below). ## Description The `applyObjectStyle` property defines if and when an object style should be automatically applied to an article. Use one of the following options: | Value | Description | | ----------------------------------------------------- | --------------------------------------------------------------------------------------- | | ApplyObjectStyleOptions.APPLY_DURING_CREATE_AND_PLACE | Only apply the object style when creating or placing the article, not when updating it. | | ApplyObjectStyleOptions.REAPPLY_WHEN_UPDATING | Always apply the object style. | | ApplyObjectStyleOptions.DO_NOT_APPLY | Never apply the object style. | The default value is ApplyObjectStyleOptions.APPLY_DURING_CREATE_AND_PLACE. ## Examples **Set the \"Apply Object Style\" preference to \"Do Not Apply\"** ```javascript app.studioPreferences.applyObjectStyle = ApplyObjectStyleOptions.DO_NOT_APPLY; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-applyObjectStyle"
    },
    "155": {
        "title": "autoAddPlacedAssetsImageToStudio",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: autoAddPlacedAssetsImageToStudio sortid: 68 permalink: 1162-autoAddPlacedAssetsImageToStudio --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioPreference.autoAddPlacedAssetsImageToStudio; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description _(Applies only when using an integration with Assets)_ The `autoAddPlacedAssetsImageToStudio` property defines if an image that is placed from Assets should be automatically turned into an object in Studio. The default value is 'true'. ## Examples **Turn on the \"Automatically Add Placed Assets Image To Studio\" preference** ```javascript app.studioPreferences.autoAddPlacedAssetsImageToStudio = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-autoAddPlacedAssetsImageToStudio"
    },
    "156": {
        "title": "bringInCopyArticlesToFrontInLayoutView",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: bringInCopyArticlesToFrontInLayoutView sortid: 68 permalink: 1162-bringInCopyArticlesToFrontInLayoutView --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.bringInCopyArticlesToFrontInLayoutView; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `bringInCopyArticlesToFrontInLayoutView` property defines if all article components of a story should be brought to the front in Layout view when an article is opened in InCopy. This makes sure that all article components are fully accessible and not obscured by other layout objects. The default value is 'false'. ## Examples **Turn on the \"Bring InCopy Articles to Front in Layout View\" preference** ```javascript app.studioPreferences.bringInCopyArticlesToFrontInLayoutView = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-bringInCopyArticlesToFrontInLayoutView"
    },
    "157": {
        "title": "displayLayoutNameInCreateArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: displayLayoutNameInCreateArticle sortid: 68 permalink: 1162-displayLayoutNameInCreateArticle --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioPreference.displayLayoutNameInCreateArticle; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `displayLayoutNameInCreateArticle` property defines if the name of the layout should be used as the default name for an article that is created from a frame on the layout. The default value is 'false'. ## Examples **Turn on the \"Display Layout Name in Create Article\" preference** ```javascript app.studioPreferences.displayLayoutNameInCreateArticle = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-displayLayoutNameInCreateArticle"
    },
    "158": {
        "title": "documentPaneFontSize",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: documentPaneFontSize sortid: 68 permalink: 1162-documentPaneFontSize --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.documentPaneFontSize; ``` ### Access _read\/write_ ### Parameters **Return value** _PaneFontSizeOptions_ A PaneFontSizeOptions enum value (see below). ## Description The `documentPaneFontSize` property defines the font size for the text in the Document pane of the Studio panel. Use one of the following options: | Value | Description | | ------------------------------- | ----------------------------- | | PaneFontSizeOptions.SMALL | Use the small font size | | PaneFontSizeOptions.MEDIUM | Use the medium font size | | PaneFontSizeOptions.LARGE | Use the large font size | | PaneFontSizeOptions.EXTRA_LARGE | Use the extra large font size | The default value is PaneFontSizeOptions.SMALL. ## Examples **Set the \"Document Pane Font Size\" preference to \"Large\"** ```javascript app.studioPreferences.documentPaneFontSize = PaneFontSizeOptions.LARGE; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-documentPaneFontSize"
    },
    "159": {
        "title": "dossierPanelShowRelatedDossiers",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: dossierPanelShowRelatedDossiers sortid: 68 permalink: 1162-dossierPanelShowRelatedDossiers --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioPreference.dossierPanelShowRelatedDossiers; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `dossierPanelShowRelatedDossiers` property defines whether related dossiers of the active layout should be displayed in the Dossier panel. The default value is 'true'. ## Examples **Show only the dossier of the layout that was checked out. Dossiers that contain placed files are hidden.** ```javascript app.studioPreferences.dossierPanelShowRelatedDossiers = false; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | 17.0.1+ \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-dossierPanelShowRelatedDossiers"
    },
    "160": {
        "title": "enableSmartCaching",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: enableSmartCaching sortid: 68 permalink: 1162-enableSmartCaching --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.enableSmartCaching; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `enableSmartCaching` property defines if Smart Caching (automatically downloading a file onto a user's system when the file is routed to that user) should be enabled. The default value is 'true'. ## Examples **Enable Smart Caching** ```javascript app.studioPreferences.enableSmartCaching = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-enableSmartCaching"
    },
    "161": {
        "title": "playSoundWhenRoutingMessageArrives",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: playSoundWhenRoutingMessageArrives sortid: 68 permalink: 1162-playSoundWhenRoutingMessageArrives --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.playSoundWhenRoutingMessageArrives; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `playSoundWhenRoutingMessageArrives` property defines if a sound should play when a user receives a message when a file is routed to that user. The default value is 'false'. ## Examples **Turn on the \"Play Sound when Message Arrives\" preference** ```javascript app.studioPreferences.playSoundWhenRoutingMessageArrives = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-playSoundWhenRoutingMessageArrives"
    },
    "162": {
        "title": "previewPaneFontSize",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: previewPaneFontSize sortid: 68 permalink: 1162-previewPaneFontSize --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.previewPaneFontSize; ``` ### Access _read\/write_ ### Parameters **Return value** _PaneFontSizeOptions_ A PaneFontSizeOptions enum value (see below). ## Description The `previewPaneFontSize` property defines the font size for the text in the Preview pane of the Studio panel. Use one of the following options: | Value | Description | | ------------------------------- | ----------------------------- | | PaneFontSizeOptions.SMALL | Use the small font size | | PaneFontSizeOptions.MEDIUM | Use the medium font size | | PaneFontSizeOptions.LARGE | Use the large font size | | PaneFontSizeOptions.EXTRA_LARGE | Use the extra large font size | The default value is PaneFontSizeOptions.SMALL. ## Examples **Set the \"Preview Pane Font Size\" preference to \"Large\"** ```javascript app.studioPreferences.previewPaneFontSize = PaneFontSizeOptions.LARGE; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-previewPaneFontSize"
    },
    "163": {
        "title": "showImportOptionsDialogOnPlace",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: showImportOptionsDialogOnPlace sortid: 68 permalink: 1162-showImportOptionsDialogOnPlace --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.showImportOptionsDialogOnPlace; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `showImportOptionsDialogOnPlace` property defines if the Import options dialog should be shown when an image is placed. The default value is 'false'. ## Examples **Turn on the \"Show Import Options Dialog on Place\" preference** ```javascript app.studioPreferences.showImportOptionsDialogOnPlace = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-showImportOptionsDialogOnPlace"
    },
    "164": {
        "title": "showRoutingMessageAlert",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: showRoutingMessageAlert sortid: 68 permalink: 1162-showRoutingMessageAlert --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ```javascript StudioPreference.showRoutingMessageAlert; ``` ### Access _read\/write_ ### Parameters **Return value** _ShowRoutingMessageOptions_ An ShowRoutingMessageOptions enum value (see below). ## Description The `showRoutingMessageAlert` property defines if a message is shown on screen for a user when an object is routed to that user or any user groups of which the user is part. Use one of the following options: | Value | Description | | -------------------------------------------------- | ---------------------------------------------------------------------------------------------- | | ShowRoutingMessageOptions.DO_NOT_SHOW | No message is shown. | | ShowRoutingMessageOptions.SHOW_SENT_TO_ME | A message is shown when an object is routed to the user only. | | ShowRoutingMessageOptions.SHOW_SENT_TO_ME_OR_GROUP | A message is shown when an object is routed to the user or any of the groups the user is part. | The default value is ShowRoutingMessageOptions.DO_NOT_SHOW. ## Examples **Set the \"Routing Message Options > Alert\" preference to \"Do not show dialog\"** ```javascript app.studioPreferences.showRoutingMessageAlert = ShowRoutingMessageOptions.DO_NOT_SHOW; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-showRoutingMessageAlert"
    },
    "165": {
        "title": "updatePlacedImagesWhenOpeningLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updatePlacedImagesWhenOpeningLayout sortid: 68 permalink: 1162-updatePlacedImagesWhenOpeningLayout --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript StudioPreference.updatePlacedImagesWhenOpeningLayout; ``` ### Access _read\/write_ ### Parameters **Return value** _boolean_ ## Description The `updatePlacedImagesWhenOpeningLayout` property defines if images stored in Studio should be updated to their latest version when a layout is opened. The default value is 'true'. ## Examples **Turn on the \"Update Placed Studio Images When Opening a Layout\" preference** ```javascript app.studioPreferences.updatePlacedImagesWhenOpeningLayout = true; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1162-updatePlacedImagesWhenOpeningLayout"
    },
    "166": {
        "title": "Story",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Story sortid: 19 permalink: 1168-index --- The object representing a Studio or Enterprise Server Story. ### Properties * [managedArticle](.\/Properties\/managedArticle.md)",
        "url": "1168-index"
    },
    "167": {
        "title": "Story properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Story properties permalink: 1169-index --- Properties on the Story object. * [managedArticle](.\/managedArticle.md)",
        "url": "1169-index"
    },
    "168": {
        "title": "managedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticle sortid: 99 permalink: 1170-managedArticle --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Story.managedArticle; ``` ### Access _readonly_ ### Parameters **Return value** _ManagedArticle_ The managed article scripting object. ## Description The `managedArticle` property is used to obtain access to the associated ManagedArticle scripting object. Returns nothing if there is no object associated. For more info about the Managed Article object please see the [ManagedArticle](..\/..\/ManagedArticle\/index.md) documentation. ## Examples ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [ManagedArticle](..\/..\/ManagedArticle\/index.md) ",
        "url": "1170-managedArticle"
    },
    "169": {
        "title": "Workflow",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Workflow sortid: 20 permalink: 1171-index --- Provides access to workflow actions for a document ### Properties * [defaultDossier](.\/Properties\/defaultDossier.md) ### Methods * [checkIn](.\/Methods\/checkIn.md) * [abortCheckOut](.\/Methods\/abortCheckOut.md) * [saveAs](.\/Methods\/saveAs.md) * [saveVersion](.\/Methods\/saveVersion.md) * [updateAllContent](.\/Methods\/updateAllContent.md) * [placeObject](.\/Methods\/placeObject.md) * [restoreFromArchive](.\/Methods\/restoreFromArchive.md) * [setPdfProfile](.\/Methods\/setPdfProfile.md)",
        "url": "1171-index"
    },
    "170": {
        "title": "Workflow methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Workflow methods permalink: 1174-index --- Methods on the Workflow object. * [abortCheckOut](.\/abortCheckOut.md) * [checkIn](.\/checkIn.md) * [placeObject](.\/placeObject.md) * [restoreFromArchive](.\/restoreFromArchive.md) * [saveAs](.\/saveAs.md) * [saveVersion](.\/saveVersion.md) * [setPdfProfile](.\/setPdfProfile.md) * [updateAllContent](.\/updateAllContent.md)",
        "url": "1174-index"
    },
    "171": {
        "title": "abortCheckOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: abortCheckOut sortid: 100 permalink: 1172-abortCheckOut --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.abortCheckOut(); ``` ### Parameters **Return value** The `abortCheckOut()` method does not return anything. ## Description The `abortCheckOut()` method aborts the check out of the opened document. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1172-abortCheckOut"
    },
    "172": {
        "title": "checkIn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkIn sortid: 101 permalink: 1173-checkIn --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.checkIn(); ``` ### Parameters **Return value** The `checkIn()` method does not return anything. ## Description The `checkIn()` method checks the document in to the Studio or Enterprise Server system. Use the \u201cType\u201d key in the EntMetaData to indicate what kind of object should be checked in. Possible values are: \u201cLayout\u201d, \u201cLayoutTemplate\u201d, \u201cLayoutModule\u201d or \u201cLayoutModuleTemplate\u201d. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1173-checkIn"
    },
    "173": {
        "title": "placeObject",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: placeObject sortid: 102 permalink: 1175-placeObject --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.placeObject(id, where, position); ``` ### Parameters **id** _String_ The object\u2019s id. **where** _Page or Spread_ The page or spread to place the article on. **position** _Array of 2 Units_ The left top starting point used for placing the article\u2019s template, in the form (top, left). The origin of the place is the top left corner of the page or spread object given. **Return value** _Array Of PageItem_ ## Description The `placeObject()` method places an article with template information on the active layer of the layout. The place action will fail when the object is not an article or does not contain template information. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1175-placeObject"
    },
    "174": {
        "title": "restoreFromArchive",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: restoreFromArchive sortid: 103 permalink: 1176-restoreFromArchive --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.restoreFromArchive([pathInElvis] [, imageRestoreLocation]); ``` ### Parameters **pathInElvis** _String (Optional)_ The path in Assets where the images should be copied to. Might be empty. In that case the images are not restored and will be unlinked. Only used in combination with the \u201cElvis_Copy\u201d image restore location (defined in the script or in the Elvis Enterprise Server plug-in). For the other image restore locations this parameter can be empty. **imageRestoreLocation** _String (Optional)_ Defines the restore location of images. When not defined the option as defined in the Elvis Enterprise Server plug-in is used. Possible values: | Value | Description | | ---------- | ---------------------------------------------------------------------------------------------- | | Elvis_Copy | The image is copied in Assets\/Elvis and is linked via a Studio\/Enterprise Server shadow object | | Enterprise | The image is copied to Studio or Enterprise Server | **Return value** _Document_ The restored Document object. ## Description The `restoreFromArchive()` method restores the opened archived document from Assets as a new object in the Studio or Enterprise Server system. Throws an exception in case of an error. Change the metadata before calling `restoreFromArchive()`. Articles on the document will be copied to Studio or Enterprise Server and the Article Components will get new IDs. Spreadsheets are copied to Studio or Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1176-restoreFromArchive"
    },
    "175": {
        "title": "saveAs",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: saveAs sortid: 104 permalink: 1239-saveAs --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.saveAs(); ``` ### Parameters **Return value** _Document_ The newly created Document object. ## Description The `saveAs()` method stores the document as a new object in the Studio or Enterprise Server system. Throws an exception in case of an error. Change the metadata before calling saveAs. Use the \u201cType\u201d key in the EntMetaData to indicate what kind of object should be created. Possible values are: \u201cLayout\u201d, \u201cLayoutTemplate\u201d, \u201cLayoutModule\u201d or \u201cLayoutModuleTemplate\u201d. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1239-saveAs"
    },
    "176": {
        "title": "saveVersion",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: saveVersion sortid: 105 permalink: 1178-saveVersion --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.saveVersion(); ``` ### Parameters **Return value** _Document_ The already opened Document object. ## Description The `saveVersion()` method silently saves a new version of the document to the Studio or Enterprise Server system. Metadata of the document that has been changed by the calling script will not be picked up and sent to the Studio or Enterprise Server system, instead the existing metadata will be sent. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1178-saveVersion"
    },
    "177": {
        "title": "setPdfProfile",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: setPdfProfile sortid: 107 permalink: 1180-setPdfProfile --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.sendDesignUpdate(pdfProfile); ``` ### Parameters **pdfProfile** _String_ The profile to be set. **Return value** _boolean_ Returns false when the profile does not exist else sets the profile and returns true. ## Description The `setPdfProfile()` method sets the profile to use when generating PDF files for the current document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1180-setPdfProfile"
    },
    "178": {
        "title": "updateAllContent",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updateAllContent sortid: 108 permalink: 1181-updateAllContent --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.updateAllContent(); ``` ### Parameters **Return value** The `updateAllContent()` method does not return anything. ## Description The `updateAllContent()` method updates the contents of all articles and images in the document to match the latest version. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1181-updateAllContent"
    },
    "179": {
        "title": "Workflow properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Workflow properties permalink: 1155-index --- Properties on the ManagedImage object. * [entMetaData](.\/entMetaData.md) * [items](.\/pageItem.md)",
        "url": "1155-index"
    },
    "180": {
        "title": "defaultDossier",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: defaultDossier sortid: 109 permalink: 1182-defaultDossier --- ## Syntax ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ```javascript Workflow.defaultDossier; ``` ### Access _read\/write_ ### Parameters **Return value** _String_ The name of the dossier. ## Description The `defaultDossier` property is used to get or get the the name of the Dossier which is used as the default Dossier in the create workflow dialog. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1182-defaultDossier"
    },
    "181": {
        "title": "Scripting Events",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Scripting Events sortid: 21 permalink: 1240-index --- Scripting events allow the integrator to perform scripts on a number of events occurring in the InDesign and InCopy application. Currently scripts can be executed around saving, opening and placing. ### Setup By default Studio for InDesign and InCopy looks for scripts named exactly the same as the event with a \u2018.jsx\u2019 extension in the application\u2019s scripts folder. For example the script for the afterPlace event will be afterPlace.jsx. The default locations are: **Windows** C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version <x>\\Scripts\\Scripts Panel **Macintosh** ~\/Library\/Preferences\/Adobe InDesign\/Version <x>\/Scripts\/Scripts Panel Should you require a different location for the scripts or different names, then these can be modified by adding a ScriptingEvents element to wwsettings.xml: ```xml <!-- Windows --> <SCEnt:ScriptingEvents> <!-- Use the target attribute to specify for which application it will be used. Omitting the attribute will result in the path being used for all applications. --> <SCEnt:ScriptsFolderPath target=\"InCopy\">C:\\IDScripts<\/SCEnt:ScriptsFolderPath> <!-- Specify script names when you want to use the same script for multiple events. --> <SCEnt:Script event=\"afterOpenLayout\">bla.jsx<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> <!-- Macintosh --> <SCEnt:ScriptingEvents> <SCEnt:ScriptsFolderPath target=\"InCopy\">Macintosh HD:IDScripts<\/SCEnt:ScriptsFolderPath> <SCEnt:Script event=\"afterOpenLayout\">bla.jsx<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> ``` #### ScriptsFolderPath element The ScriptsFolderPath element points to the location where scripts are located. It can occur zero or more times. The optional target attribute indicates in which application the path should be used. Accepted values are InCopy and InDesign. All other values are ignored and have the same result as omitting the attribute. If the element omits this attribute, the path will be used for all applications. An element with a target attribute takes precedence over an element without one. A note about path formats on macOS: Since Studio for InDesign and InCopy version 19.0.0 installed on InDesign 19.4 or later, both POSIX ('\/') and HFS (':') paths are supported. Before this combination of the Studio for InDesign and InCopy plug-ins and InDesign, only HFS (':') path notation should be applied. It is expected that in future versions of InDesign the HFS path notation will be phased out. Examples: ```xml <!-- Macintosh, HFS notation: --> <SCEnt:ScriptsFolderPath target=\"InDesign\">Macintosh HD:Applications:Adobe InDesign 2024:Scripts:EventScripts<\/SCEnt:ScriptsFolderPath> <!-- Macintosh, POSIX notation: --> <SCEnt:ScriptsFolderPath target=\"InDesign\">\/Applications\/Adobe InDesign 2024\/Scripts\/EventScripts<\/SCEnt:ScriptsFolderPath> ``` #### Script element Defines per named event which script needs to be run. Event names are equal to the list in the Events section. For events not defined in the WWsettings.xml file, the default name will be used. ### Conflicts In some rare occasions conflicts occur between an event and the scripted actions executed at that event. An example is an afterCreateArticle.jsx script which performs a check-out operation of the just created article. The conflict here is that when the user creates an article and thus the script starts executing, Studio for InDesign and InCopy might not have finalised all actions related to article creation such as locking all related (article) components. As a result the scripted check-out operation fails as the specified component is not locked or no locked components are found. These type of issues can be solved by modifying the script slightly. The example code below shows how this can be done. In the modified afterCreateArticle.jsx script all initial actions are cast in a new function like the afterCreateArticle() below. Furthermore two variables are added: an idle task and a listener. What now happens when the script is invoked (by the afterCreateArticle event) is that _only_ an idle task is created. Hereafter Studio for InDesign and InCopy continues its execution. When Studio for InDesign and InCopy has finalised all actions related to the creation of the article it becomes idle. On that moment the script performs the specified idle tasks being: the execution of the afterCreateArticle() function and the removal of its own task (such that it executes only once). ```javascript #targetengine 'session'; var myIdleTask = app.idleTasks.add({name:\"one_off_idle_task\", sleep:1}); var onIdleEventListener = myIdleTask.addEventListener(IdleEvent.ON_IDLE, function() { try { afterCreateArticle(); var myIdleTaskName = \"one_off_idle_task\"; var myIdleTask = app.idleTasks.itemByName(myIdleTaskName); if (myIdleTask != null) myIdleTask.remove(); } catch (err) { alert(\"script failed...\"); } } ); function afterCreateArticle() { ... } ``` ### Automatically deployed scripts Event scripts can be deployed automatically from Studio Server to InDesign, InCopy or InDesign Server. See [helpcenter.woodwing.com](https:\/\/helpcenter.woodwing.com\/hc\/en-us\/articles\/30156741870481-Automatically-deploying-event-scripts-for-Studio-for-InDesign-and-InCopy) for more information on this mechanism. In the case that for one scripting event both a local and a server deployed event script are present, then only the event script deployed from the server will be executed. If the event script file is renamed in WWSettings.xml then only the renamed script file is executed. So if the 'afterLogOn.jsx' script is deployed from the Server and WWSettings.xml specifies 'bla.jsx' for the afterLogOn event, then the deployed script will not be executed. ### Troubleshooting It is possible to debug scripts on a per event basis when an event occurs. To debug the afterOpenLayout event: ```xml <SCEnt:ScriptingEvents> <SCEnt:Script debug=\"true\" event=\"afterOpenLayout\">bla.js<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> ``` The events mechanism has its own logging which can be enabled through the WWsettings.xml file. This will show which script will be run and whether running is successful: ```xml <Logging level=\"0\" allareas=\"0\"> <Area name=\"ScriptingEvents\"\/> <\/Logging> ``` ### Events The following fields are used to describe an event: |Field|Description| |-----|-----------| |When |Describes at what moment the event occurs.| |Where |Describes in what applications the event occurs.| |Arguments in |Table describing key value pairs set in app.scriptArgs for the event.| |Arguments out |Table describing key value pairs that a script can set in app.scriptArgs for the event.| |Notes |Event related notes.| * [afterCreateArticle](.\/afterCreateArticle.md) * [afterCreateArticleTemplate](.\/afterCreateArticleTemplate.md) * [afterCreateContinuationElement](.\/afterCreateContinuationElement.md) * [afterCreateEnterpriseImageFromElvisImage](.\/afterCreateEnterpriseImageFromElvisImage.md) * [afterCreateJump](.\/afterCreateJump.md) * [afterCreateLayout](.\/afterCreateLayout.md) * [afterCreateLayoutTemplate](.\/afterCreateLayoutTemplate.md) * [afterDetachArticle](.\/afterDetachArticle.md) * [afterExportArticle](.\/afterExportArticle.md) * [afterExportArticleTemplate](.\/afterExportArticleTemplate.md) * [afterGeometryNotification](.\/afterGeometryNotification.md) * [afterLogOn](.\/afterLogOn.md) * [afterOpenArticle](.\/afterOpenArticle.md) * [afterOpenLayout](.\/afterOpenLayout.md) * [afterPlace](.\/afterPlace.md) * [afterRefreshArticle](.\/afterRefreshArticle.md) * [afterRefreshImage](.\/afterRefreshImage.md) * [afterSaveArticle](.\/afterSaveArticle.md) * [afterSaveLayout](.\/afterSaveLayout.md) * [beforeCreateArticle](.\/beforeCreateArticle.md) * [beforeCreateArticleTemplate](.\/beforeCreateArticleTemplate.md) * [beforeCreateLayout](.\/beforeCreateLayout.md) * [beforeCreateLayoutTemplate](.\/beforeCreateLayoutTemplate.md) * [beforeDetachArticle](.\/beforeDetachArticle.md) * [beforeExportArticle](.\/beforeExportArticle.md) * [beforeExportArticleTemplate](.\/beforeExportArticleTemplate.md) * [beforeImportImage](.\/beforeImportImage.md) * [beforeLogOff](.\/beforeLogOff.md) * [beforePlace](.\/beforePlace.md) * [beforeSaveArticle](.\/beforeSaveArticle.md) * [beforeSaveLayout](.\/beforeSaveLayout.md) ",
        "url": "1240-index"
    },
    "182": {
        "title": "afterCreateArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateArticle sortid: 110 permalink: 1174-afterCreateArticle --- ## When After sending a new article to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ---------------------------------------------- | | Core_ID | The object id of the article that was created. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1174-afterCreateArticle"
    },
    "183": {
        "title": "afterCreateArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateArticleTemplate sortid: 111 permalink: 1175-afterCreateArticleTemplate --- ## When After sending a new article template to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------------------------- | | Core_ID | The object id of the article template that was created. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1175-afterCreateArticleTemplate"
    },
    "184": {
        "title": "afterCreateContinuationElement",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateContinuationElement sortid: 112 permalink: 1176-afterCreateContinuationElement --- ## When After creating a continuation element for a Smart Jump article. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ## Arguments in | Key | Description | | ----------------------- | ------------------------------------------------------------------------------------------------- | | document | The object id of the layout from where the element is created on. | | parentStory | The story id of the component of the Smart Jump story the element belongs to. | | [continuationFromStory] | The story id of the continuation from element belonging to the component of the Smart Jump story. | | [continuationOnStory] | The story id of the continuation on element belonging to the component of the Smart Jump story. | ## Arguments out n\/a ## Notes The event is not sent when creating a Smart Jump. In that case the afterCreateJump event is sent. ## Examples **Using afterCreateJump** ```javascript var msg = \"Document: \" + app.scriptArgs.get(\"document\") + \"\\n\"; msg += \"Parent Story: \" + app.scriptArgs.get(\"parentStory\") + \"\\n\"; if (app.scriptArgs.isDefined(\"continuationToStory\")) msg += \"Continuation To Story: \" + app.scriptArgs.get(\"continuationToStory\") + \"\\n\"; if (app.scriptArgs.isDefined(\"continuationFromStory\")) msg += \"Continuation From Story: \" + app.scriptArgs.get(\"continuationFromStory\") + \"\\n\"; alert(msg); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1176-afterCreateContinuationElement"
    },
    "185": {
        "title": "afterCreateEnterpriseImageFromElvisImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateEnterpriseImageFromElvisImage sortid: 113 permalink: 1177-afterCreateEnterpriseImageFromElvisImage --- ## When After a Studio or Enterprise Server Image was created from an Elvis Image (and added to a Dossier) ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ## Arguments in | Key | Description | | -------- | ------------------------------------------- | | Core_ID | The object id of the created image. | | pageItem | The id of the frame that contains the image | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1177-afterCreateEnterpriseImageFromElvisImage"
    },
    "186": {
        "title": "afterCreateJump",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateJump sortid: 114 permalink: 1178-afterCreateJump --- ## When After creating a Smart Jump article. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ## Arguments in | Key | Description | | ------------------------------ | --------------------------------------------------------------------------------------------- | | sourceDocument | The object id of the layout from where the Smart Jump starts. | | sourceStory | The story id of the first component of the Smart Jump story. | | sourceContinuationStory | The story id of the continuation element belonging to the first component of the Smart Jump. | | [destinationDocument] | The object id of the layout where the Smart Jump lands. | | [destinationStory] | The story id of the second component of the Smart Jump story. | | [destinationContinuationStory] | The story id of the continuation element belonging to the second component of the Smart Jump. | ## Arguments out n\/a ## Notes destinationDocument, destinationStory and destinationContinuationStory are optional when for example using the \u201cCreate Jump From Here\u201d command. ## Examples **Using afterCreateJump** ```javascript var msg = \"Source ID: \" + app.scriptArgs.get(\"sourceDocument\") + \"\\n\"; msg += \"Source Story: \" + app.scriptArgs.get(\"sourceStory\") + \"\\n\"; msg += \"Source Continuation: \" + app.scriptArgs.get(\"sourceContinuationStory\") + \"\\n\"; if (app.scriptArgs.isDefined(\"destinationDocument\")) { msg += \"Destination ID: \" + app.scriptArgs.get(\"destinationDocument\") + \"\\n\"; msg += \"Destination Story: \" + app.scriptArgs.get(\"destinationStory\") + \"\\n\"; msg += \"Dest. Continuation:\" + app.scriptArgs.get(\"destinationContinuationStory\") + \"\\n\"; } alert(msg); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1178-afterCreateJump"
    },
    "187": {
        "title": "afterCreateLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateLayout sortid: 115 permalink: 1179-afterCreateLayout --- ## When After creating a new layout in the Studio or Enterprise Server system. This includes Save As. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | --------------------------------------------- | | Core_ID | The object id of the layout that was created. | ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Studio or Enterprise Server system. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1179-afterCreateLayout"
    },
    "188": {
        "title": "afterCreateLayoutTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateLayoutTemplate sortid: 116 permalink: 1180-afterCreateLayoutTemplate --- ## When After creating a new layout template in the Studio or Enterprise Server system. This includes Save As. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------------------------ | | Core_ID | The object id of the layout template that was created. | ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Studio or Enterprise Server system. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1180-afterCreateLayoutTemplate"
    },
    "189": {
        "title": "afterDetachArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterDetachArticle sortid: 117 permalink: 1181-afterDetachArticle --- ## When After detaching an article from a layout. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------------------------- | | Core_ID | The object id of the article template that was created. | ## Arguments out n\/a ## Notes This event is only broadcasted when using the Detach Article action, not when detaching by deleting the article from the layout. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1181-afterDetachArticle"
    },
    "190": {
        "title": "afterExportArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterExportArticle sortid: 118 permalink: 1182-afterExportArticle --- ## When After creating the XML representation of an article on disk. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ----------------------------------------------- | | Core_ID | The object id of the article that was exported. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1182-afterExportArticle"
    },
    "191": {
        "title": "afterExportArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterExportArticleTemplate sortid: 119 permalink: 1183-afterExportArticleTemplate --- ## When After creating the XML representation of an article template on disk. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ----------------------------------------------- | | Core_ID | The object id of the article that was exported. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1183-afterExportArticleTemplate"
    },
    "192": {
        "title": "afterGeometryNotification",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterGeometryNotification sortid: 120 permalink: 1247-afterGeometryNotification --- ## When After receiving a Geometry Update notification from Studio Server in InCopy ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ## Arguments in | Key | Description | | ------- | --------------------------------------------- | | Core_ID | The object id of the layout that was updated. | | geometryUpdateState<sup>\u2460<\/sup> | The impact of the geometry update for the article in InCopy. | \u2460 Notes about the argument _geometryUpdateState_: * _geometryUpdateState_ is available since versions 17.0.6 and 18.0.3. * For the argument _geometryUpdateState_ possible values are: * **HighPriority** _the position and\/or size of the article being edited is touched_ * **LowPriority** _the geometry of the article is not touched. The layout has been changed._ ## Arguments out n\/a ## Examples **Using afterGeometryNotification and app.UpdateGeometry** ```javascript #targetengine 'session'; var myIdleTask = app.idleTasks.add({name:\"one_off_idle_task\", sleep:1}); var layoutId = app.scriptArgs.get( 'Core_ID' ); var geometryUpdateState = \"HighPriority\"; geometryUpdateState = app.scriptArgs.get( 'geometryUpdateState' ); var onIdleEventListener = myIdleTask.addEventListener(IdleEvent.ON_IDLE, function() { try { afterReceivingGeometry(); var myIdleTaskName = \"one_off_idle_task\"; var myIdleTask = app.idleTasks.itemByName(myIdleTaskName); if (myIdleTask != null) myIdleTask.remove(); } catch (err) { alert(\"Script afterGeometryNotification failed.\"); } } ); function afterReceivingGeometry() { try{ doUpdateGeometry(); } catch(e){ alert( \"ERROR: in afterGeometryNotification script: \" + e.name + \"\\n\\n\" + e.message + \"\\n\\nFound on line \" + e.line ); } } function doUpdateGeometry() { app.scriptPreferences.userInteractionLevel = UserInteractionLevels.INTERACT_WITH_ALL; var articleNames = getArticleNames( layoutId ); if ( articleNames.length > 0 ) { if( geometryUpdateState == \"HighPriority\") { var result = confirm(\"New layout information is available for article [ \" + articleNames + \" ]. \" + \"Do you want to update now?\", false); if( result == true ) { try { app.updateGeometry(layoutId); } catch (e) { alert(\"Cannot update geometry from the script, the updateGeometry action have wrong layout id value. Please fix the script and try again.\"); } } } } } function getArticleNames( layoutId ) { var articleNames = \"\"; try { var openDocs = app.documents; var doc; for (var i = 0; i < openDocs.length; i++) { doc = openDocs[i]; if (!doc.entMetaData.has(\"Core_ID\") ) continue; var docId = doc.entMetaData.get( \"Core_ID\" ); if (docId == layoutId) { var managedArticles = doc.managedArticles; var masLen = managedArticles.length; var managedArticle, md, artName, lockedBy; for( var artIdx = 0; artIdx < masLen; ++artIdx ) { managedArticle = managedArticles.item(artIdx); md = managedArticle.entMetaData; if( md.has( \"Core_Name\" ) && md.has( \"LockedBy\" )) { lockedBy = md.get(\"LockedBy\"); if( lockedByUser(lockedBy) ) { artName = md.get( \"Core_Name\" ); if (articleNames.length > 0) { articleNames += \", \"; } articleNames += artName; } } } } } } catch (e) { alert( \"ERROR: in afterGeometryNotification script: \" + e.name + \"\\n\\n\" + e.message + \"\\n\\nFound on line \" + e.line ); } return articleNames; } function lockedByUser(lockName) { var activeUser = \"\"; if (\"activeUser\" in app.entSession) { activeUser = app.entSession.activeUser.toLowerCase(); } lockName = lockName.toLowerCase(); \/\/ Get all users on the current server var users = app.entSession.getUsers(); \/\/ Check if the lock name can be tied to our user var userName, fullName; for(var i = 0; i < users.length; i++) { userName = users[i][0].toLowerCase(); fullName = users[i][1].toLowerCase(); if(activeUser == userName || activeUser == fullName) { if (lockName == userName || lockName == fullName) { \/\/ The shortname or longname matches, return true; } } } \/\/ Someone else locked the file. return false; } ``` ## Supported versions | Adobe Version | Supported | | ------------- | ---------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1247-afterGeometryNotification"
    },
    "193": {
        "title": "afterLogOn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterLogOn sortid: 121 permalink: 1184-afterLogOn --- ## When After a successful login, re-login or fork login. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1184-afterLogOn"
    },
    "194": {
        "title": "afterOpenArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterOpenArticle sortid: 122 permalink: 1185-afterOpenArticle --- ## When After opening an article ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------ | | Core_ID | The object id of the placed article. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1185-afterOpenArticle"
    },
    "195": {
        "title": "afterOpenLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterOpenLayout sortid: 123 permalink: 1186-afterOpenLayout --- ## When After opening a layout ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1186-afterOpenLayout"
    },
    "196": {
        "title": "afterPlace",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterPlace sortid: 124 permalink: 1187-afterPlace --- ## When After placing an object. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | -------- | ----------------------------------------------- | | pageitem | The id of the frame the object was placed into. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1187-afterPlace"
    },
    "197": {
        "title": "afterRefreshArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterRefreshArticle sortid: 125 permalink: 1188-afterRefreshArticle --- ## When After refreshing the XML representation of an article from disk. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------------------ | | Core_ID | The object id of the article that was refreshed. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1188-afterRefreshArticle"
    },
    "198": {
        "title": "afterRefreshImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterRefreshImage sortid: 126 permalink: 1189-afterRefreshImage --- ## When When opening a layout after a highres advert is placed or modified using the planning interface. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ## Arguments in | Key | Description | | ------- | --------------------------------------------------------- | | Core_ID | The object id of the advert that was created or modified. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1189-afterRefreshImage"
    },
    "199": {
        "title": "afterSaveArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterSaveArticle sortid: 127 permalink: 1190-afterSaveArticle --- ## When After sending an article to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | -------------------------------------------- | | Core_ID | The object id of the article that was saved. | ## Arguments out n\/a| ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1190-afterSaveArticle"
    },
    "200": {
        "title": "afterSaveLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterSaveLayout sortid: 128 permalink: 1191-afterSaveLayout --- ## When After sending a layout to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | ------------------------------------------- | | Core_ID | The object id of the layout that was saved. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1191-afterSaveLayout"
    },
    "201": {
        "title": "beforeCreateArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateArticle sortid: 129 permalink: 1192-beforeCreateArticle --- ## When Before sending a new article to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Don\u2019t change the text of the article at this stage. Changes will not be sent to the server. Use beforeExportArticle instead. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1192-beforeCreateArticle"
    },
    "202": {
        "title": "beforeCreateArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateArticleTemplate sortid: 130 permalink: 1193-beforeCreateArticleTemplate --- ## When Before sending a new article template to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Don\u2019t change the text of the article template at this stage. Changes will not be sent to the server. Use beforeExportArticle instead. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1193-beforeCreateArticleTemplate"
    },
    "203": {
        "title": "beforeCreateLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateLayout sortid: 131 permalink: 1194-beforeCreateLayout --- ## When Before creating a new layout in the Studio or Enterprise Server system. This includes Save As. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Studio or Enterprise Server system. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1194-beforeCreateLayout"
    },
    "204": {
        "title": "beforeCreateLayoutTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateLayoutTemplate sortid: 132 permalink: 1195-beforeCreateLayoutTemplate --- ## When Before creating a new layout template in the Studio or Enterprise Server system. This includes Save As. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Studio or Enterprise Server system. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1195-beforeCreateLayoutTemplate"
    },
    "205": {
        "title": "beforeDetachArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeDetachArticle sortid: 133 permalink: 1196-beforeDetachArticle --- ## When Before detaching an article from a layout. A template of placed components of the article was generated for scripter to use before detaching the article component. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------------------- | --------------------------------------------------- | | Core_ID | The object ID of the article that will be detached. | | templateGeoFilePath | The template file path. | ## Arguments out n\/a ## Notes A template with all placed components of the article will be generated in the file path: templateGeoFilePath, and will be deleted after the event. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1196-beforeDetachArticle"
    },
    "206": {
        "title": "beforeExportArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeExportArticle sortid: 134 permalink: 1197-beforeExportArticle --- ## When Before creating the XML representation of an article on disk. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes made to the text will be part of the export. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1197-beforeExportArticle"
    },
    "207": {
        "title": "beforeExportArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeExportArticleTemplate sortid: 135 permalink: 1198-beforeExportArticleTemplate --- ## When Before creating the XML representation of an article template on disk. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes made to the text will be part of the export, as well as changes made to the layout in InDesign (Server) that will be part of the template information. ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1198-beforeExportArticleTemplate"
    },
    "208": {
        "title": "beforeImportImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeImportImage sortid: 136 permalink: 1199-beforeImportImage --- ## When Before importing (planned) image type files when synchronizing planned layouts and adverts. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes This event is not called when importing image type files from panels in Studio for InDesign and InCopy. ## Examples **Using beforeImportImage** ```javascript var msg = \"ID: \" + app.scriptArgs.get(\"Core_ID\") + \"\\n\"; msg += \"Name: \" + app.scriptArgs.get(\"Core_Name\") + \"\\n\"; msg += \"Brand: \" + app.scriptArgs.get(\"Core_Publication\") + \"\\n\"; msg += \"Issue: \" + app.scriptArgs.get(\"Core_Issue\") + \"\\n\"; msg += \"Section: \" + app.scriptArgs.get(\"Core_Section\") + \"\\n\"; msg += \"Editions: \" + app.scriptArgs.get(\"Editions\") + \"\\n\"; msg += \"Status: \" + app.scriptArgs.get(\"Core_Basket\") + \"\\n\"; msg += \"RouteTo: \" + app.scriptArgs.get(\"RouteTo\") + \"\\n\"; msg += \"File type: \" + app.scriptArgs.get(\"Type\") + \"\\n\"; msg += \"File format: \" + app.scriptArgs.get(\"Format\") + \"\\n\"; msg += \"Frame ID: \" + app.scriptArgs.get(\"pageitem\") + \"\\n\"; alert(msg); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1199-beforeImportImage"
    },
    "209": {
        "title": "beforeLogOff",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeLogOff sortid: 137 permalink: 1200-beforeLogOff --- ## When Just before the log-off action. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1200-beforeLogOff"
    },
    "210": {
        "title": "beforePlace",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforePlace sortid: 138 permalink: 1201-beforePlace --- ## When Before placing an object. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ------- | --------------------------------------- | | Core_ID | The object ID instigated to be placed. | | GUID | The GUID of the component to be placed. | ## Arguments out | Key | Description | | -------- | --------------------------------------------------------------------------------------------------------- | | objectId | The overruling object ID when the incoming object must be overruled. Empty when no change has to be made. | | GUID | The overruling GUID when the incoming GUID must be overruled. Empty when no change has to be made. | ## Notes The script argument key \u2018objectId\u2019 is mandatory and case sensitive when sending back an object ID. ## Example Script ```javascript var objId = app.scriptArgs.get(\"Core_ID\"); var compGUID = app.scriptArgs.get(\"GUID\"); \/\/ Define the return variable (default empty string). var overrulingObjId = \"\"; var overrulingGUID = \"\"; \/\/ If the sent object ID is '11801 indicate that object with ID '9668' should be placed. if (objId === \"11801\") { overrulingObjId = \"9668\"; } \/\/ Correct GUID if necessary. if (compGUID === \"9460ad9f-7e87-4dea-9a25-491a0d43e297\") { overrulingGUID = \"6f717dfc-6c71-4072-a219-519ac94e2c0a\"; } \/\/ The script argument key 'objectId' is mandatory and case sensative when sending back an object ID. app.scriptArgs.set(\"objectId\", overrulingObjId); app.scriptArgs.set(\"GUID\", overrulingGUID); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1201-beforePlace"
    },
    "211": {
        "title": "beforeSaveArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeSaveArticle sortid: 139 permalink: 1202-beforeSaveArticle --- ## When Before sending an article to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/incopy.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ---------------- | ----------------------------------------- | | Core_ID | The object id of the article being saved. | | Core_Name | New name. | | Core_Publication | New Brand. | | Core_Issue | New Issue. | | Core_Section | New Section. | | Editions | New Edition(s). | | Core_Basket | New Status. | | RouteTo | New routing. | | Action | The workflow action done by the user. | ## Arguments out | Key | Description | | ------------ | -------------------------------------------------------------------- | | errorId | Set the error id to a non-zero value to abort the save. | | errorMessage | The message to be shown to the user. Requires the errorId to be set. | ## Notes Don\u2019t change the text of the article at this stage. Changes are not sent to the server. Use beforeExportArticle instead. ## Examples **Using beforeSaveArticle** ```javascript var msg = \"ID: \" + app.scriptArgs.get(\"Core_ID\") + \"\\n\"; msg += \"Name: \" + app.scriptArgs.get(\"Core_Name\") + \"\\n\"; msg += \"Publication: \" + app.scriptArgs.get(\"Core_Publication\") + \"\\n\"; msg += \"Issue: \" + app.scriptArgs.get(\"Core_Issue\") + \"\\n\"; msg += \"Section: \" + app.scriptArgs.get(\"Core_Section\") + \"\\n\"; msg += \"Editions: \" + app.scriptArgs.get(\"Editions\") + \"\\n\"; msg += \"Status: \" + app.scriptArgs.get(\"Core_Basket\") + \"\\n\"; msg += \"RouteTo: \" + app.scriptArgs.get(\"RouteTo\") + \"\\n\"; alert(msg); \/\/ Preferred way is to set the error id and message app.scriptArgs.set(\"errorId\", \"12366\"); app.scriptArgs.set(\"errorMessage\", \"Cannot save now.\"); \/\/ An exception that is not caught results in an error throw Error(\"This is an unexpected error\"); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1202-beforeSaveArticle"
    },
    "212": {
        "title": "beforeSaveLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeSaveLayout sortid: 140 permalink: 1203-beforeSaveLayout --- ## When Before sending a layout to the Studio or Enterprise Server system. ## Where ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesign.png %}) ![]({{ site.baseurl }}{% link smart-connection-scripting-guide\/images\/indesignserver.png %}) ## Arguments in | Key | Description | | ---------------- | ---------------------------------------- | | Core_ID | The object id of the layout being saved. | | Core_Name | New name. | | Core_Publication | New Brand. | | Core_Issue | New Issue. | | Core_Section | New Section. | | Editions | New Edition(s) | | Core_Basket | New Status | | RouteTo | New routing | | Action | The workflow action done by the user. | ## Arguments out | Key | Description | | ------------ | -------------------------------------------------------------------- | | errorId | Sets the error id to a non-zero value to abort the save. | | errorMessage | The message to be shown to the user. Requires the errorId to be set. | ## Notes The script can change the document. Changes will be saved and sent to the server. ## Examples **Using beforeSaveLayout** ```javascript var msg = \"ID: \" + app.scriptArgs.get(\"Core_ID\") + \"\\n\"; msg += \"Name: \" + app.scriptArgs.get(\"Core_Name\") + \"\\n\"; msg += \"Publication: \" + app.scriptArgs.get(\"Core_Publication\") + \"\\n\"; msg += \"Issue: \" + app.scriptArgs.get(\"Core_Issue\") + \"\\n\"; msg += \"Section: \" + app.scriptArgs.get(\"Core_Section\") + \"\\n\"; msg += \"Editions: \" + app.scriptArgs.get(\"Editions\") + \"\\n\"; msg += \"Status: \" + app.scriptArgs.get(\"Core_Basket\") + \"\\n\"; msg += \"RouteTo: \" + app.scriptArgs.get(\"RouteTo\") + \"\\n\"; alert(msg); \/\/ Preferred way is to set the error id and message app.scriptArgs.set(\"errorId\", \"12366\"); app.scriptArgs.set(\"errorMessage\", \"Cannot save now.\"); \/\/ An exception that is not caught results in an error throw Error(\"This is an unexpected error\"); ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ## See also - [Scripting Events](.\/index.md) ",
        "url": "1203-beforeSaveLayout"
    },
    "213": {
        "title": "Overrule placement of Article and Dossiers",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Overrule placement of Article and Dossiers sortid: 22 permalink: 1242-index --- With scripting code it is possible to overrule the placement of whole articles and it is possible to implement the placement of Dossiers. It is currently not possible to overrule the placement of images and article components. The script in which this can be implemented should be placed into the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: | Platform | Script locations | | --------- | ----------------------------------------------------------------------------------------------------------------- | | Windows | C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts | | | C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts | | Macintosh | ~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts | | | \/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts | The script should have the following properties: - The target engine must be \u201cplaceoverride\u201d (`#targetengine \"placeoverride\"`) - The name of the object must be \u201cPlaceOverride\u201d (`function PlaceOverride`) - There may only be one object of the PlaceOverride class and this needs to have the name \u201cplaceOverride\u201d (`var placeOverride = new PlaceOverride`). - The PlaceOverride class needs to implement all following functions: ## getDebugConfig ### Parameters **Return value** _array of boolean_ It returns an array of booleans: | N\u00ba | Description | | --- | -------------------- | | 1 | debug canPlaceItems? | | 2 | debug placeItems? | | 3 | show error alerts? | ### Description Tells Studio for InDesign and InCopy whether the functions need to be debugged or not. ### Example ```javascript return [false, false, true]; ``` ## canPlaceItems ### Parameters **itemsToPlaceJson** _string_ A string with json content that contains the database ID, type, format and guid of the item to be placed. For 8.3 the guid will always be empty. A sample of such a json string is: ```javascript [ { itemID: \"909\", type: \"Article\", format: \"application\/incopyicml\", guid: \"\", }, ]; ``` Properties of one item in this json string: | Name | Type | Description | | ------ | ------ | ---------------------------------------------------- | | itemID | string | The database id of the item to be placed | | type | string | The type of the item to be placed | | format | string | The format of the item to be placed | | guid | string | The guid of the component to be placed. Maybe empty. | **targetLayoutJson** _string_ A string with json content that contains the database ID and type of the target layout. This is always only one item. A sample of such a json string is: ```javascript [{ itemID: \"444\", type: \"Layout\" }]; ``` Properties of one item in this json string: | Name | Type | Description | | ------ | ------ | ------------------------------------ | | itemID | string | The database id of the target Layout | | type | string | The type of the target Layout | **targetItem** _string_ A string with the id of the target item on the layout. You can get the target item with this piece of code: ```javascript var targetID = parseInt(targetItem); var doc = app.activeDocument; var item = doc.pageItems.itemByID(targetID); ``` The string can also be \"0\". In that case the target item is unknown. **Return value** _boolean_ A boolean that indicates if the script is capable of placing the passed item(s) or not. ### Description Tells Studio for InDesign and InCopy whether this script can place the passed items or not. At this moment this function is only called for Dossiers. ## placeItems ### Parameters **itemsToPlaceJson** _string_ A string with json content that contains the database ID, type, format and guid of the item to be placed. For 8.3 the guid will always be empty. A sample of such a json string is: ```javascript [ { itemID: \"909\", type: \"Article\", format: \"application\/incopyicml\", guid: \"\", }, ]; ``` Properties of one item in this json string: | Name | Type | Description | | ------ | ------ | ---------------------------------------------------- | | itemID | string | The database id of the item to be placed | | type | string | The type of the item to be placed | | format | string | The format of the item to be placed | | guid | string | The guid of the component to be placed. Maybe empty. | **targetItem** _string_ A string with the id of the target item on the layout. You can get the target item with this piece of code: ```javascript var targetID = parseInt(targetItem); var doc = app.activeDocument; var item = doc.pageItems.itemByID(targetID); ``` The string can also be \"0\". In that case the target item is unknown. **targetPage** _number_ 0-based page number that matches the passed targetPointJson. It can directly be used in the myDoc.pages.item(<page_num>) scripting call. **targetPointJson** _string_ a piece of json that describes the target position. This can be one point (when doing a drag and drop or click) or two points when dragging a rectangle as target position. Examples of this json: One point: ```javascript [{ x: \"36\", y: \"36\" }]; ``` Two points: ```javascript [ { x: \"36\", y: \"470\" }, { x: \"199\", y: \"568.8\" }, ]; ``` Properties of one point: | Name | Type | Description | | ---- | ------ | ----------------------- | | x | string | x position of the point | | y | string | y position of the point | **Return value** _array with boolean and array of number_ The return value is an array with two values: | N\u00ba | Type | Description | | --- | --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | 1 | boolean | Indicates if the script handled the place or not. If this boolean is true the script handled the placement and Studio should not perform its place code. If this boolean is false the script did not handle the placement and Studio should perform its place code. Studio is not able to place Dossiers. If the script to place a dossier returns false Studio for InDesign and InCopy will empty the place gun. | | 2 | array of number | This is an array of ids of the items that are placed or replaced by the scripting code. If this list is empty and the boolean was true the Studio place code is not called and the place gun is still loaded. If this list contains items the Studio place code is not called and the place gun will be emptied. | An example of the return value is: ```javascript var arr = new Array(); arr.push(123); arr.push(456); return [true, arr]; ``` ### Description Called to override the default placement functionality of articles. Depending on the returned information the Studio for InDesign and InCopy code will perform or not perform its own place code. Also called to place Dossiers if the canPlaceItems call returned true. The Studio for InDesign and InCopy code is not capable of placing Dossiers. ## Sample script The following script shows the parameters to the user that are passed to the placeItems call. At the end we tell Studio that we handled the placement, but since nothing is placed the place gun will not be unloaded. ```javascript #targetengine \"placeoverride\" function PlaceOverride() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_PlaceOverride_prototype_called) == 'undefined') { _PlaceOverride_prototype_called = true; PlaceOverride.prototype.getDebugConfig = getDebugConfig; PlaceOverride.prototype.placeItems = placeItems; PlaceOverride.prototype.canPlaceItems = canPlaceItems; } \/\/ - getDebugConfig - function getDebugConfig() { \/\/ Tell Studio not to debug, but to show alerts. return [ false, false, true ]; } \/\/ - canPlaceItems - function canPlaceItems( itemsToPlaceJson, targetLayoutJson, targetItem ) { \/\/ Tell Studior that we are able to place the passed \/\/ item. return true; } \/\/ - placeItems - function placeItems( itemsToPlaceJson, targetItem, targetPage, targetPointJson ) { \/\/ Collect information about the passed parameters and show it to the user \/\/ itemToPlaceJson contains about the item to be placed. var message = \"Json input itemToPlaceJson : \\n\" + itemsToPlaceJson +\"\\n\\nInterpreted items from Json: \\n\"; \/\/ Interpret the Json var itemsToPlace = eval( itemsToPlaceJson ); for( var i=0 ; i < itemsToPlace.length ; i++ ) { message = message + \"Item \" + i + \":\\n\"; message = message + \" itemID = \" + itemsToPlace[i].itemID + \"\\n\"; message = message + \" type = \" + itemsToPlace[i].type + \"\\n\"; message = message + \" format = \" + itemsToPlace[i].format + \"\\n\"; message = message + \" guid = \" + itemsToPlace[i].guid + \"\\n\\n\"; } \/\/ Show the collected information about the items to be placed to the user. alert( message ); \/\/ Show the id of the target item to the user. This is passed as string with the targetItem parameter. alert( \"targetItem : \\n \" + targetItem ); \/\/ Show the number of the target page to the user. This is passed as string with the targetPage parameter. alert( \"targetPage : \\n \" + targetPage ); \/\/ targetPointJson contains about the target position. var pos_message = \"Json input targetPointJson : \\n\" + targetPointJson + \"\\n\\nInterpreted points from Json: \\n\"; \/\/ Interpret the Json var targetPos = eval( targetPointJson ); for( var i=0 ; i < targetPos.length ; i++ ) { pos_message = pos_message + \"Point \" + i + \":\\n\"; pos_message = pos_message + \" x = \" + targetPos[i].x + \"pt\\n\"; pos_message = pos_message + \" y = \" + targetPos[i].y + \"pt\\n\\n\"; } \/\/ Show the collected information about the target position. alert( pos_message ); \/\/ Tell Studio that we handled the placement, \/\/ but we did not place anything. So the placegun is not unloaded. var arr = new Array(); return [ true, arr ]; } } var placeOverride = new PlaceOverride; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1242-index"
    },
    "214": {
        "title": "Overrule adding created images to a Dossier",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Overrule adding created images to a Dossier sortid: 23 permalink: 1243-index --- When an image that is stored in Assets\/Elvis is turned into an image that is stored in Studio or Enterprise Server, it is by default added to a Dossier. This action can be overruled with scripting code. The script in which this can be implemented should be placed into the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: | Platform | Script locations | | --------- | ----------------------------------------------------------------------------------------------------------------- | | Windows | C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts | | | C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts | | Macintosh | ~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts | | | \/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts | The script should have the following properties: - The target engine must be \u201celvisobjectoverride\u201d (`#targetengine \"elvisobjectoverride\"`). - The name of the object must be \u201cAddToDossierOverride\u201d (`function AddToDossierOverride`). - There may only be one object of the AddToDossierOverride class and this needs to have the name \u201caddToDossierOverride\u201d (`var addToDossierOverride = new AddToDossierOverride`). The AddToDossierOverride class needs to have the following functions: ## getDebugConfig ### Parameters **Return value** _Array of Boolean_ It returns an array of bool: | N\u00ba | Description | | --- | -------------------- | | 1 | debug canPlaceItems? | | 2 | debug placeItems? | | 3 | show error alerts? | Example: ```javascript return [false, false, true]; ``` ### Description Tells Studio for InDesign and InCopy whether the functions need to be debugged or not. ## addObjectsToDossier ### Parameters **objectsToAddJson** _string_ A string with json content that contains the database ID and page item of the objects to be added to a Dossier. A sample of such a json string is: ```javascript [{ objectID: \"909\", pageItem: \"123\" }]; ``` Properties of one item in this json string: | Name | Type | Description | | -------- | ------ | ----------------------------------------- | | objectID | string | The database id of the object to be added | | pageItem | string | The page item id of the object | **targetDossier** _string_ A string with the database id of the Dossier that was found by the Studio code as default Dossier. **showSelectDossierDialog** _string_ A string (\u201ctrue\u201d or \u201cfalse\u201d) that indicates if the Studio code finds that it is needed to show the Select Dossier dialog or not. **suppressUI** _boolean_ Should any user interface be suppressed or not. **Return value** _Array of Boolean and Strings_ The return value is an array with three values: | N\u00ba | Type | Description | | --- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | | 1 | boolean | Indicates if the Studio code to add the objects to the Dossier should be performed or not. | | 2 | string | The database id of the Dossier to which the object should be added to by the Studio code. (not used when the first boolean is false) | | 3 | string | Indicates if the Select Dossier dialog should be shown or not (\u201ctrue\u201d or \u201cfalse\u201d). (not used when the first boolean is false) | A sample of the return value is: ```javascript return [true, \"123\", \"false\"]; ``` ### Description Called to override the default Dossier that is used to add the objects to. Depending on the returned information, the Studio code will use the updated target Dossier, show the Select Dossier dialog, or does not do anything. ## Sample script The following script shows the parameters to the user that are passed to the addObjectsToDossier call. At the end we tell Studio for InDesign and InCopy that it can add the objects to the Dossier. ```javascript #targetengine \"elvisobjectoverride\" function AddToDossierOverride() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_AddToDossierOverride_prototype_called) == 'undefined') { _AddToDossierOverride_prototype_called = true; AddToDossierOverride.prototype.getDebugConfig = getDebugConfig; AddToDossierOverride.prototype.addObjectsToDossier = addObjectsToDossier; } \/\/ - getDebugConfig - function getDebugConfig() { \/\/ Tell Studio not to debug, but to show alerts. return [ false, false, true ]; } \/\/ - addObjectsToDossier - function addObjectsToDossier( objectsToAddJson, targetDossier, showSelectDossierDialog, suppressUI ) { \/\/ Collect information about the passed parameters and show it to the user \/\/ objectToAddJson contains about the items to be added to a dossier. var message = \"Json input objectsToAddJson : \\n\" + objectsToAddJson +\"\\n\\nInterpreted items from Json: \\n\"; \/\/ Interpret the Json var objectsToAdd = eval( objectsToAddJson ); for( var i=0 ; i < objectsToAdd.length ; i++ ) { message = message + \"Object \" + i + \":\\n\"; message = message + \" objectID = \" + objectsToAdd[i].objectID + \"\\n\"; message = message + \" pageItem = \" + objectsToAdd[i].pageItem + \"\\n\\n\"; } message = message + \"targetDossier = \" + targetDossier + \"\\n\\n\"; message = message + \"showSelectDossierDialog = \" + showSelectDossierDialog + \"\\n\\n\"; message = message + \"suppressUI = \" + suppressUI + \"\\n\\n\"; alert( message ); \/\/ Tell Studio to continue with adding the objects \/\/ to the dossier return [ true, targetDossier, showSelectDossierDialog ]; } } var addToDossierOverride = new AddToDossierOverride; ``` ## Supported versions | Adobe Version | Supported | | ------------- | --------- | | 2022 | \u2714 | | 2023 | \u2714 | | 2024 | \u2714 | | 2025 | \u2714 | ",
        "url": "1243-index"
    },
    "215": {
        "title": "Custom menu items",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Custom menu items permalink: 1241-index --- The context menu of the Documents pane in the Studio for InDesign and InCopy panel can be extended with custom menu items. These custom menu items are provided with information by Studio for InDesign and InCopy about the selected items, giving the custom menu items the ability to control the enabling of the items. The information passed by Studio for InDesign and InCopy is all data from the query result for the selected items. Custom menu items work in both list and thumbnail view, although the information passed to the script in thumbnail view is limited. Custom menu items are added and controlled through a script. The script is placed in the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: |Platform|Location| |--------|--------| |Windows |C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts| ||C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts| |Macintosh |~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts| ||\/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts| Below is an annotated sample script that adds 3 custom menu items with custom enabling. Important notes: * Studio for InDesign and InCopy expects the naming of the functions in the ScriptMenu object and of the ScriptMenu instance as shown in the script. * There can only be one instance of the ScriptMenu object, meaning that if you have several customizations adding custom menu items, you have to think out a framework for adding custom menu items from these customizations. * The targetengine must be \u201cscriptmenu\u201d. * The name of the script file does not matter. * Any errors occurring need to handled by the script as Studio for InDesign and InCopy will simply ignore any errors occurring during the execution of the script functions. ## Examples **Sample custom menu items script** ```javascript #targetengine \"scriptmenu\" function ScriptMenu() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_ScriptMenu_prototype_called) == 'undefined') { _ScriptMenu_prototype_called = true; ScriptMenu.prototype.getDebugConfig = getDebugConfig; ScriptMenu.prototype.getActions = getActions; ScriptMenu.prototype.updateState = updateState; ScriptMenu.prototype.run = run; } \/** * Tells Studio whether the calls need to be debugged * * @return array of bool * ----------------------------------------- * debug update? debug run? show error alerts * ----------------------------------------- * [ false, false false ] *\/ function getDebugConfig() { return [ false, false, false ]; } \/** * Provides a list of actions this script supports to the caller * * @return array of arrays of string * ----------------------------------------- * unique id name * ----------------------------------------- * [ [ \"action1\", \"initialName\" ], * [ \"action2\", \"initialName\" ], * [ \"action3\", \"initialName\" ] ] *\/ function getActions() { var r = [ [ \"1\", \"Item 1\" ], [ \"2\", \"Item 2\" ], [ \"3\", \"Item 3\" ] ]; return r; } \/** * update the state of the actions * * @return array of arrays * -------------------------------------------------------------- * unique id name enabled checked * -------------------------------------------------------------- * [ [ \"action1\", \"name\", true, false ], * [ \"action2\", \"name\", false, false ], * [ \"action3\", \"name\", true, true ] ] *\/ function updateState( selectedItemsJson ) { var selectedItems = eval( selectedItemsJson ); \/\/ selectedItems is an array of objects, each representing a selected item for( var i = 0; i < selectedItems.length; ++i ) { var selItem = selectedItems[i];v \/\/ The type of item that is selected. Either 'normal' or 'component'. \/\/ The available properties (see below) depend on this type. var itemType = selItem.itemType; \/\/ Each item has key\/value pairs representing the fields \/\/ shown in the query result. These are added as properties \/\/ to the object var id = selItem.values.ID; var t = selItem.values.Type; \/\/ Check a certain field exists var f = \"\"; if( selItem.values.hasOwnProperty( \"Format\" ) ) f = selItem.values.Format; \/\/ Iterate over all properties var vals = selItem.values; for( var k in vals ) { var v = vals[k]; } } \/\/ Build a return value, normally based on the selected items. var r = [ [ \"1\", \"Item 1\", true, false ], [ \"2\", \"Item 2\", false, false ], [ \"3\", \"Item 3\", true, true ] ]; return r; } \/** * execute the given action. actionId is as defined by getActions * Script is responsible for handling all errors. *\/ function run( selectedItemsJson, actionId ) { \/\/ Do something alert( actionId ); } } var scriptMenu = new ScriptMenu; ``` ",
        "url": "1241-index"
    }
}