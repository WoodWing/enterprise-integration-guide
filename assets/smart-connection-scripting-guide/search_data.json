{
    "31": {
        "title": "Smart Connection Scripting Guide",
        "author": "",
        "category": "",
        "content": "--- layout: guide title: Smart Connection Scripting Guide description: Scripting Guide for Smart Connection permalink: 1068-index --- ## Introduction Many aspects of the Smart Connection client application are scriptable using JavaScript. This guide contains examples sharing how to script the Smart Connection specific part of the scripting object model. It should be used as a companion to InDesign\u2019s Scripting Guide and the scripting model presented by the Adobe ExtendScript Toolkit. This guide can be used for the following version of Smart Connection: * Smart Connection for Adobe CC * Smart Connection for Adobe CC 2014 * Smart Connection for Adobe CC 2015 * Smart Connection for Adobe CC 2017 * Smart Connection for Adobe CC 2018 * Smart Connection for Adobe CC 2019 ## Required knowledge We assume the reader of this guide is familiar with: * The functionality of the Enterprise system. * The functionality of Smart Connection within InDesign and InCopy. * JavaScript language. For more information, see: [https:\/\/javascript.info](https:\/\/javascript.info). ## Support To discuss any Smart Connection scripting related issues, visit WoodWing's [Community web site](https:\/\/helpcenter.woodwing.com\/hc\/en-us\/community\/topics) (log-in required). If you require further support for Enterprise, visit WoodWing's [Help Center web site](https:\/\/helpcenter.woodwing.com\/hc\/en-us) and follow the directions for submitting questions. ",
        "url": "1068-index"
    },
    "32": {
        "title": "ManagedLayoutModules",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModules permalink: 1165-index --- ### Methods * [count](Methods\/count.md)",
        "url": "1165-index"
    },
    "33": {
        "title": "ManagedLayoutModules methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModules methods permalink: 1167-index --- Methods on the ManagedLayoutModules object. * [count](.\/count.md) ",
        "url": "1167-index"
    },
    "34": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 61 permalink: 1166-count --- ## Syntax ```javascript ManagedLayoutModules.count(); ``` ### Parameters **Return value** *number* The number of ManagedLayoutModules objects in the collection. ## Description The `count()` method returns the number of ManagedLayoutModule objects within the ManagedLayoutModules collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1166-count"
    },
    "35": {
        "title": "ManagedLayoutModule",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModule permalink: 1161-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md)",
        "url": "1161-index"
    },
    "36": {
        "title": "ManagedLayoutModule properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedLayoutModule properties permalink: 1163-index --- Properties on the ManagedLayoutModule object. * [entMetaData](.\/entMetaData.md) * [pageItems](.\/pageItem.md)",
        "url": "1163-index"
    },
    "37": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 59 permalink: 1162-entMetaData --- ## Syntax ```javascript ManagedLayoutModule.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the Layout Module. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1162-entMetaData"
    },
    "38": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 60 permalink: 1164-pageItem --- ## Syntax ```javascript ManagedLayoutModule.pageItem; ``` ### Access *readonly* ### Parameters **Return value** *PageItem* A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1164-pageItem"
    },
    "39": {
        "title": "ManagedImages",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImages permalink: 1157-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md)",
        "url": "1157-index"
    },
    "40": {
        "title": "ManagedImages methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImages methods permalink: 1160-index --- Methods on the ManagedImages object. * [add](.\/add.md) * [count](.\/count.md) ",
        "url": "1160-index"
    },
    "41": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 57 permalink: 1158-add --- ## Syntax ```javascript ManagedImages.add(); ``` ### Parameters **Return value** *ManagedImage* The created, or newly added, MangedImage object. ## Description The `add()` method creates a new ManagedImage scripting object that can serve as the basis for creating a new image in Enterprise. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1158-add"
    },
    "42": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 58 permalink: 1159-count --- ## Syntax ```javascript ManagedImages.count(); ``` ### Parameters **Return value** *number* The number of ManagedImage objects in the collection. ## Description The `count()` method returns the number of ManagedImage objects within the ManagedImages collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1159-count"
    },
    "43": {
        "title": "ManagedImage",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage permalink: 1151-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md) ### Methods * [create](Methods\/create.md)",
        "url": "1151-index"
    },
    "44": {
        "title": "ManagedImage properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage properties permalink: 1155-index --- Properties on the ManagedImage object. * [entMetaData](.\/entMetaData.md) * [items](.\/pageItem.md)",
        "url": "1155-index"
    },
    "45": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 55 permalink: 1154-entMetaData --- ## Syntax ```javascript ManagedImage.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the image. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1154-entMetaData"
    },
    "46": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 56 permalink: 1156-pageItem --- ## Syntax ```javascript ManagedImage.pageItem; ``` ### Access *readonly* ### Parameters **Return value** *PageItem* A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1156-pageItem"
    },
    "47": {
        "title": "ManagedImage methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage methods permalink: 1153-index --- Methods on the ManagedImage object. * [create](.\/create.md)",
        "url": "1153-index"
    },
    "48": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 54 permalink: 1152-create --- ## Syntax ```javascript ManagedImage.create(pageItem); ``` ### Parameters **pageItems** *PageItem* The Page item of which the image will be created. **Return value** The `create()` method does not return anything. ## Description The `create()` method creates an image from the given page item in the Enterprise system. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1152-create"
    },
    "49": {
        "title": "Overrule adding of created Enterprise image to Dossier",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Overrule adding of created Enterprise image to Dossier permalink: 1172-index --- With scripting code it is possible to overrule the addition of Enterprise images, created from Elvis images, to a Dossier. The script in which this can be implemented should be placed into the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: |Platform|Script locations| |--------|----------------| |Windows |C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts| ||C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts| |Macintosh |~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts| ||\/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts| The script should have the following properties: * The target engine must be \u201celvisobjectoverride\u201d (#targetengine \u201celvisobjectoverride\u201d). * The name of the object must be \u201cAddToDossierOverride\u201d (function AddToDossierOverride). * There may only be one object of the AddToDossierOverride class and this needs to have the name \u201caddToDossierOverride\u201d (var addToDossierOverride = new AddToDossierOverride). The AddToDossierOverride class needs to have the following functions: ## getDebugConfig ### Parameters **Return value** *Array of Boolean* It returns an array of bool: |#|Description| |-|-----------| |1 |debug canPlaceItems?| |2 |debug placeItems?| |3 |show error alerts?| Example: ```javascript return [ false, false, true ]; ``` ### Description Tells Smart Connection whether the functions need to be debugged or not. ## addObjectsToDossier ### Parameters **objectsToAddJson** *string* A string with json content that contains the database ID and page item of the objects to be added to a Dossier. A sample of such a json string is: ```javascript [{\u201cobjectID\u201d: \u201c909\u201d, \u201cpageItem\u201d: \u201c123\u201d}] ``` Properties of one item in this json string: |Name|Type|Description| |----|----|-----------| |objectID |string |The database id of the object to be added| |pageItem |string |The page item id of the object| **targetDossier** *string* A string with the database id of the Dossier that was found by the Smart Connection code as default Dossier. **showSelectDossierDialog** *string* A string (\u201ctrue\u201d or \u201cfalse\u201d) that indicates if the Smart Connection code finds that it is needed to show the Select Dossier dialog or not. **suppressUI** *boolean* Should any user interface be suppressed or not. **Return value** *Array of Boolean and Strings* The return value is an array with three values: |#|Type|Description| |-|----|-----------| |1 |boolean |Indicates if the Smart Connection code to add the objects to the Dossier should be performed or not.| |2 |string |The database id of the Dossier to which the object should be added to by the Smart Connection code. (not used when the first boolean is false)| |3 |string |Indicates if the Select Dossier dialog should be shown or not (\u201ctrue\u201d or \u201cfalse\u201d). (not used when the first boolean is false)| A sample of the return value is: ```javascript return [ true, \u201c123\u201d, \u201cfalse\u201d ]; ``` ### Description Called to override the default dossier that is used to add the objects to. Dependent on the returned information the Smart Connection code will use the updated target dossier, show the select dossier dialog or does not do anything. ## Sample script The following script shows the parameters to the user that are passed to the addObjectsToDossier call. At the end we tell Smart Connection that it can add the objects to the Dossier. ```javascript #targetengine \"elvisobjectoverride\" function AddToDossierOverride() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_AddToDossierOverride_prototype_called) == 'undefined') { _AddToDossierOverride_prototype_called = true; AddToDossierOverride.prototype.getDebugConfig = getDebugConfig; AddToDossierOverride.prototype.addObjectsToDossier = addObjectsToDossier; } \/\/ - getDebugConfig - function getDebugConfig() { \/\/ Tell Smart Connection not to debug, but to show alerts. return [ false, false, true ]; } \/\/ - addObjectsToDossier - function addObjectsToDossier( objectsToAddJson, targetDossier, showSelectDossierDialog, suppressUI ) { \/\/ Collect information about the passed parameters and show it to the user \/\/ objectToAddJson contains about the items to be added to a dossier. var message = \"Json input objectsToAddJson : \\n\" + objectsToAddJson +\"\\n\\nInterpreted items from Json: \\n\"; \/\/ Interpret the Json var objectsToAdd = eval( objectsToAddJson ); for( var i=0 ; i < objectsToAdd.length ; i++ ) { message = message + \"Object \" + i + \":\\n\"; message = message + \" objectID = \" + objectsToAdd[i].objectID + \"\\n\"; message = message + \" pageItem = \" + objectsToAdd[i].pageItem + \"\\n\\n\"; } message = message + \"targetDossier = \" + targetDossier + \"\\n\\n\"; message = message + \"showSelectDossierDialog = \" + showSelectDossierDialog + \"\\n\\n\"; message = message + \"suppressUI = \" + suppressUI + \"\\n\\n\"; alert( message ); \/\/ Tell Smart Connection that to continue with adding the objects to the dossier return [ true, targetDossier, showSelectDossierDialog ]; } } var addToDossierOverride = new AddToDossierOverride; ``` ",
        "url": "1172-index"
    },
    "50": {
        "title": "Overrule placement of Article and Dossiers",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Overrule placement of Article and Dossiers permalink: 1173-index --- The scripting possibilities of this chapter are introduced in Smart Connection v8.3. With scripting code it is possible to overrule the placement of whole articles and it is possible to implement the placement of Dossiers. It is currently not possible to overrule the placement of images and article components. The script in which this can be implemented should be placed into the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: |Platform|Script locations| |--------|----------------| |Windows |C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts| ||C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts| |Macintosh |~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts| ||\/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts| The script should have the following properties: * The target engine must be \u201cplaceoverride\u201d (#targetengine \u201cplaceoverride\u201d) * The name of the object must be \u201cPlaceOverride\u201d (function PlaceOverride) * There may only be one object of the PlaceOverride class and this needs to have the name \u201cplaceOverride\u201d (var placeOverride = new PlaceOverride). * The PlaceOverride class needs to implement all following functions: ## getDebugConfig ### Parameters **Return value** *array of boolean* It returns an array of booleans: |#|Description| |-|-----------| |1|debug canPlaceItems?| |2|debug placeItems?| |3|show error alerts?| ### Description Tells Smart Connection whether the functions need to be debugged or not. ### Example ```javascript return [ false, false, true ]; ``` ## canPlaceItems ### Parameters **itemsToPlaceJson** *string* A string with json content that contains the database ID, type, format and guid of the item to be placed. For 8.3 the guid will always be empty. A sample of such a json string is: ```javascript [{\"itemID\": \"909\", \"type\": \"Article\", \"format\": \"application\/incopyicml\", \"guid\": \"\"}] ``` Properties of one item in this json string: |Name|Type|Description| |----|----|-----------| |itemID |string |The database id of the item to be placed| |type |string |The type of the item to be placed| |format |string |The format of the item to be placed| |guid |string |The guid of the component to be placed. Maybe empty.| **targetLayoutJson** *string* A string with json content that contains the database ID and type of the target layout. This is always only one item. A sample of such a json string is: ```javascript [{\"itemID\": \"444\",\"type\": \"Layout\"}] ``` Properties of one item in this json string: |Name|Type|Description| |----|----|-----------| |itemID |string |The database id of the target Layout| |type |string |The type of the target Layout| **targetItem** *string* A string with the id of the target item on the layout. You can get the target item with this piece of code: ```javascript var targetID = parseInt( targetItem ); var doc = app.activeDocument; var item = doc.pageItems.itemByID( targetID ); ``` The string can also be \"0\". In that case the target item is unknown. **Return value** *boolean* A boolean that indicates if the script is capable of placing the passed item(s) or not. ### Description Tells Smart Connection whether this script can place the passed items or not. At this moment this function is only called for Dossiers. ## placeItems ### Parameters **itemsToPlaceJson** *string* A string with json content that contains the database ID, type, format and guid of the item to be placed. For 8.3 the guid will always be empty. A sample of such a json string is: ```javascript [{\"itemID\": \"909\", \"type\": \"Article\", \"format\": \"application\/incopyicml\", \"guid\": \"\"}] ``` Properties of one item in this json string: |Name|Type|Description| |----|----|-----------| |itemID |string |The database id of the item to be placed| |type |string |The type of the item to be placed| |format |string |The format of the item to be placed| |guid |string |The guid of the component to be placed. Maybe empty.| **targetItem** *string* A string with the id of the target item on the layout. You can get the target item with this piece of code: ```javascript var targetID = parseInt( targetItem ); var doc = app.activeDocument; var item = doc.pageItems.itemByID( targetID ); ``` The string can also be \"0\". In that case the target item is unknown. **targetPage** *number* 0-based page number that matches the passed targetPointJson. It can directly be used in the myDoc.pages.item(<page_num>) scripting call. **targetPointJson** *string* a piece of json that describes the target position. This can be one point (when doing a drag and drop or click) or two points when dragging a rectangle as target position. Examples of this json: One point: ```javascript [{\"x\": \"36\",\"y\": \"36\"}] ``` Two points: ```javascript [{\"x\": \"36\",\"y\": \"470\"},{\"x\": \"199\", \"y\": \"568.8\"}] ``` Properties of one point: |Name|Type|Description| |----|----|-----------| |x |string |x position of the point| |y |string |y position of the point| **Return value** *array with boolean and array of number* The return value is an array with two values: |#|Type|Description| |----|----|-----------| |1 |boolean |Indicates if the script handled the place or not. If this boolean is true the script handled the placement and Smart Connection should not perform its place code. If this boolean is false the script did not handle the placement and Smart Connection should perform its place code. Smart Connection is not able to place Dossiers. If the script to place a dossier returns false Smart Connection will empty the place gun.| |2 |array of number |This is an array of ids of the items that are placed or replaced by the scripting code. If this list is empty and the boolean was true the Smart Connection place code is not called and the place gun is still loaded. If this list contains items the Smart Connection place code is not called and the place gun will be emptied.| An example of the return value is: ```javascript var arr = new Array(); arr.push( 123 ); arr.push( 456 ); return [ true, arr ]; ``` ### Description Called to override the default placement functionality of articles. Dependent on the returned information the Smart Connection code will perform or not perform its own place code. Also called to place Dossiers if the canPlaceItems call returned true. The Smart Connection code is not capable of placing Dossiers. ## Sample script The following script shows the parameters to the user that are passed to the placeItems call. At the end we tell Smart Connection that we handled the placement, but since nothing is placed the place gun will not be unloaded. ```javascript #targetengine \"placeoverride\" function PlaceOverride() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_PlaceOverride_prototype_called) == 'undefined') { _PlaceOverride_prototype_called = true; PlaceOverride.prototype.getDebugConfig = getDebugConfig; PlaceOverride.prototype.placeItems = placeItems; PlaceOverride.prototype.canPlaceItems = canPlaceItems; } \/\/ - getDebugConfig - function getDebugConfig() { \/\/ Tell Smart Connection not to debug, but to show alerts. return [ false, false, true ]; } \/\/ - canPlaceItems - function canPlaceItems( itemsToPlaceJson, targetLayoutJson, targetItem ) { \/\/ Tell Smart Connection that we are able to place the passed item. return true; } \/\/ - placeItems - function placeItems( itemsToPlaceJson, targetItem, targetPage, targetPointJson ) { \/\/ Collect information about the passed parameters and show it to the user \/\/ itemToPlaceJson contains about the item to be placed. var message = \"Json input itemToPlaceJson : \\n\" + itemsToPlaceJson +\"\\n\\nInterpreted items from Json: \\n\"; \/\/ Interpret the Json var itemsToPlace = eval( itemsToPlaceJson ); for( var i=0 ; i < itemsToPlace.length ; i++ ) { message = message + \"Item \" + i + \":\\n\"; message = message + \" itemID = \" + itemsToPlace[i].itemID + \"\\n\"; message = message + \" type = \" + itemsToPlace[i].type + \"\\n\"; message = message + \" format = \" + itemsToPlace[i].format + \"\\n\"; message = message + \" guid = \" + itemsToPlace[i].guid + \"\\n\\n\"; } \/\/ Show the collected information about the items to be placed to the user. alert( message ); \/\/ Show the id of the target item to the user. This is passed as string with the targetItem parameter. alert( \"targetItem : \\n \" + targetItem ); \/\/ Show the number of the target page to the user. This is passed as string with the targetPage parameter. alert( \"targetPage : \\n \" + targetPage ); \/\/ targetPointJson contains about the target position. var pos_message = \"Json input targetPointJson : \\n\" + targetPointJson + \"\\n\\nInterpreted points from Json: \\n\"; \/\/ Interpret the Json var targetPos = eval( targetPointJson ); for( var i=0 ; i < targetPos.length ; i++ ) { pos_message = pos_message + \"Point \" + i + \":\\n\"; pos_message = pos_message + \" x = \" + targetPos[i].x + \"pt\\n\"; pos_message = pos_message + \" y = \" + targetPos[i].y + \"pt\\n\\n\"; } \/\/ Show the collected information about the target position. alert( pos_message ); \/\/ Tell Smart Connection that we handled the placement, but we did not place anything. \/\/ So the placegun is not unloaded. var arr = new Array(); return [ true, arr ]; } } var placeOverride = new PlaceOverride; ``` ",
        "url": "1173-index"
    },
    "51": {
        "title": "ManagedWorkflow",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedWorkflow permalink: 1171-index --- Provides access to workflow actions for a document ### Properties * [defaultDossier](.\/Properties\/defaultDossier.md) ### Methods * [checkIn](.\/Methods\/checkIn.md) * [abortCheckOut](.\/Methods\/abortCheckOut.md) * [saveAs](.\/Methods\/saveAs.md) * [saveVersion](.\/Methods\/saveVersion.md) * [updateAllContent](.\/Methods\/updateAllContent.md) * [sendDesignUpdate](.\/Methods\/sendDesignUpdate.md) * [placeObject](.\/Methods\/placeObject.md) * [restoreFromArchive](.\/Methods\/restoreFromArchive.md) * [setPdfProfile](.\/Methods\/setPdfProfile.md)",
        "url": "1171-index"
    },
    "52": {
        "title": "ManagedImage properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedImage properties permalink: 1155-index --- Properties on the ManagedImage object. * [entMetaData](.\/entMetaData.md) * [items](.\/pageItem.md)",
        "url": "1155-index"
    },
    "53": {
        "title": "defaultDossier",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: defaultDossier sortid: 55 permalink: 1182-defaultDossier --- ## Syntax ```javascript Workflow.defaultDossier; ``` ### Access *read\/write* ### Parameters **Return value** *String* The name of the dossier. ## Description The `defaultDossier` property is used to get or get the the name of the Dossier which is used as the default Dossier in the create workflow dialog. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1182-defaultDossier"
    },
    "54": {
        "title": "Workflow methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Workflow methods permalink: 1174-index --- Methods on the Workflow object. * [checkIn](.\/checkIn.md) * [abortCheckOut](.\/abortCheckOut.md) * [saveAs](.\/saveAs.md) * [saveVersion](.\/saveVersion.md) * [updateAllContent](.\/updateAllContent.md) * [sendDesignUpdate](.\/sendDesignUpdate.md) * [placeObject](.\/placeObject.md) * [restoreFromArchive](.\/restoreFromArchive.md) * [setPdfProfile](.\/setPdfProfile.md)",
        "url": "1174-index"
    },
    "55": {
        "title": "sendDesignUpdate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: sendDesignUpdate sortid: 54 permalink: 1179-sendDesignUpdate --- ## Syntax ```javascript ``` ### Parameters **Return value** The `sendDesignUpdate()` method does not return anything. ## Description The `sendDesignUpdate()` method sends the layout geometry to all articles placed on the layout. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1179-sendDesignUpdate"
    },
    "56": {
        "title": "setPdfProfile",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: setPdfProfile sortid: 54 permalink: 1180-setPdfProfile --- ## Syntax ```javascript ``` ### Parameters **pdfProfile** *String* The profile to be set. **Return value** *boolean* Returns false when the profile does not exist else sets the profile and returns true. ## Description The `setPdfProfile()` method sets the profile to use when generating PDF files for the current document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | | | CC 2014 | | | CC 2015 | | | CC 2017 | \u2714 (v12.1) | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1180-setPdfProfile"
    },
    "57": {
        "title": "updateAllContent",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updateAllContent sortid: 54 permalink: 1181-updateAllContent --- ## Syntax ```javascript ``` ### Parameters **Return value** The `updateAllContent()` method does not return anything. ## Description The `updateAllContent()` method updates the contents of all articles and images in the document to match the latest version. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1181-updateAllContent"
    },
    "58": {
        "title": "saveVersion",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: saveVersion sortid: 54 permalink: 1178-saveVersion --- ## Syntax ```javascript ``` ### Parameters **Return value** *Document* The already opened Document object. ## Description The `saveVersion()` method silently saves a new version of the document to the Enterprise system. Metadata of the document that has been changed by the calling script will not be picked up and sent to the Enterprise system, instead the existing metadata will be sent. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1178-saveVersion"
    },
    "59": {
        "title": "saveAs",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: saveAs sortid: 54 permalink: 1177-saveAs --- ## Syntax ```javascript ``` ### Parameters **Return value** *Document* The newly created Document object. ## Description The `saveAs()` method stores the document as a new object in the Enterprise system. Throws an exception in case of an error. Change the metadata before calling saveAs. Use the \u201cType\u201d key in the EntMetaData to indicate what kind of object should be cre- ated. Possible values are: \u201cLayout\u201d, \u201cLayout Template\u201d, \u201cLayout Module\u201d or \u201cLayout Module Template\u201d. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1177-saveAs"
    },
    "60": {
        "title": "checkIn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkIn sortid: 54 permalink: 1173-checkIn --- ## Syntax ```javascript ``` ### Parameters **Return value** The `checkIn()` method does not return anything. ## Description The `checkIn()` method checks the document in to the Enterprise system. Use the \u201cType\u201d key in the EntMetaData to indicate what kind of object should be created. Possible values are: \u201cLayout\u201d, \u201cLayout Template\u201d, \u201cLayout Module\u201d or \u201cLayout Module Template\u201d. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1173-checkIn"
    },
    "61": {
        "title": "placeObject",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: placeObject sortid: 54 permalink: 1175-placeObject --- ## Syntax ```javascript ``` ### Parameters **id** *String* The object\u2019s id. **where** *Page or Spread* The page or spread to place the article on. **position** *Array of 2 Units* The left top starting point used for placing the article\u2019s template, in the form (top, left). Th origin of the place is the top left corner of the page or spread object given. **Return value** *Array Of PageItem* ## Description The `placeObject()` method places an article with template information on the active layer of the layout. The place action will fail when the object is not an article or does not contain template information. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1175-placeObject"
    },
    "62": {
        "title": "restoreFromArchive",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: restoreFromArchive sortid: 54 permalink: 1176-restoreFromArchive --- ## Syntax ```javascript ``` ### Parameters **pathInElvis** *String (Optional)* The path in Elvis where the images should be copied to. Might be empty. In that case the images are not restored and will be unlinked. Only used in combination with the \u201cElvis_Copy\u201d image restore location (defined in the script or in the Elvis Enterprise Server plug-in). For the other image restore locations this parameter can be empty. **imageRestoreLocation** *String (Optional)* Defines the restore location of images. When not de ned the option as de ned in the Elvis Enterprise Server plug-in is used. Possible values: | Value | Description | |------------|----------------------------------------------------------------------------| | Elvis_Copy | The image is copied in Elvis and is linked via an Enterprise shadow object | | Enterprise | The image is copied to Enterprise | **Return value** *Document* The restored Document object. ## Description The `restoreFromArchive()` method restores the opened archived document from Elvis as a new object in the Enterprise system. Throws an exception in case of an error. Change the metadata before calling `restoreFromArchive()`. Articles on the document will be copied to Enterprise and the Article Components will get new IDs. Spreadsheets are copied to Enterprise. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | | | CC 2014 | \u2714 (v10.1) | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1176-restoreFromArchive"
    },
    "63": {
        "title": "abortCheckOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: abortCheckOut sortid: 54 permalink: 1172-abortCheckOut --- ## Syntax ```javascript ``` ### Parameters **Return value** The `abortCheckOut()` method does not return anything. ## Description The `abortCheckOut()` method aborts the check out of the opened document. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1172-abortCheckOut"
    },
    "64": {
        "title": "Story",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Story permalink: 1168-index --- The object representing an Enterprise Story. ### Properties * [managedArticle](.\/Properties\/managedArticle.md)",
        "url": "1168-index"
    },
    "65": {
        "title": "Story properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Story properties permalink: 1169-index --- Properties on the Story object. * [managedArticle](.\/managedArticle.md)",
        "url": "1169-index"
    },
    "66": {
        "title": "managedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticle sortid: 62 permalink: 1170-managedArticle --- ## Syntax ```javascript Story.managedArticle; ``` ### Access *readonly* ### Parameters **Return value** *ManagedArticle* The managed article scripting object. ## Description The `managedArticle` property is used to obtain access to the associated ManagedArticle scripting object. Returns nothing if there is no object associated. For more info about the Managed Article object please see the [ManagedArticle](..\/..\/ManagedArticle\/index.md) documentation. ## Examples ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [ManagedArticle](..\/..\/ManagedArticle\/index.md)",
        "url": "1170-managedArticle"
    },
    "67": {
        "title": "Session",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Session permalink: 1069-index --- The object representing the Enterprise session. ### Properties * [activeServer](.\/Properties\/activeServer.md) * [activeTicket](.\/Properties\/activeTicket.md) * [activeUrl](.\/Properties\/activeUrl.md) * [activeUser](.\/Properties\/activeUser.md) ### Methods",
        "url": "1069-index"
    },
    "68": {
        "title": "Session properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Session properties permalink: 1072-index --- Properties on the Session object. * [activeServer](.\/activeServer.md) * [activeTicket](.\/activeTicket.md) * [activeUrl](.\/activeUrl.md) * [activeUser](.\/activeUser.md)",
        "url": "1072-index"
    },
    "69": {
        "title": "activeServer",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeServer sortid: 62 permalink: 1070-activeServer --- ## Syntax ```javascript Session.activeServer; ``` ### Access *readonly* ### Parameters **Return value** *string* The display name of the active serer. ## Description The `activeServer` property is used to get the display name of the server used for the current session. It returns empty when not logged in. The name of the server will have the value of the `name` property of the `<SCEnt:ServerInfo\/>` tag in the WWSettings.xml file. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the server name used for the current session** When `activeServer` is empty, there is no active session. ```javascript \/\/ Get the server name used for the current session. var sessionObject = app.entSession; var serverName = sessionObject.activeServer; \/\/ Given in WWSettings '<SCEnt:ServerInfo name=\"Enterprise v10.5.0\" url=\"https:\/\/server.company.net\/enterprise\/index.php\"\/>' \/\/ serverUrl is now 'Enterprise v10.5.0'. ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [entSession](..\/..\/Application\/Properties\/entSession.md)",
        "url": "1070-activeServer"
    },
    "70": {
        "title": "activeTicket",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeTicket sortid: 63 permalink: 1071-activeTicket --- ## Syntax ```javascript Session.activeTicket; ``` ### Access *readonly* ### Parameters **Return value** *string* The ticket of the current session. ## Description The `activeTicket` property is used to get the ticket of the current session. It returns empty when not logged in. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the active ticket used for the current session** When `activeTicket` is empty, there is no active session. ```javascript \/\/ Get the active ticket used for the current session. var sessionObject = app.entSession; var logonTicket = sessionObject.activeTicket; ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [entSession](..\/..\/Application\/Properties\/entSession.md)",
        "url": "1071-activeTicket"
    },
    "71": {
        "title": "activeUrl",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeUrl sortid: 64 permalink: 1074-activeUrl --- ## Syntax ```javascript Session.activeUrl; ``` ### Access *readonly* ### Parameters **Return value** *string* The URL of the active server. ## Description The `activeUrl` property is used to get the URL of the server for the current session. It returns empty when not logged in. The URL of the server will have the value of the `url` property of the `<SCEnt:ServerInfo\/>` tag in the WWSettings.xml file. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the URL of the server for the current session** When `activeUrl` is empty, there is no active session. ```javascript \/\/ Get the URL of the server for the current session. var sessionObject = app.entSession; var serverUrl = sessionObject.activeUrl; \/\/ Given in WWSettings '<SCEnt:ServerInfo name=\"Enterprise v10.5.0\" url=\"https:\/\/server.company.net\/enterprise\/index.php\"\/>' \/\/ serverUrl is now 'https:\/\/server.company.net\/enterprise\/index.php'. ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [entSession](..\/..\/Application\/Properties\/entSession.md)",
        "url": "1074-activeUrl"
    },
    "72": {
        "title": "activeUser",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeUser sortid: 65 permalink: 1075-activeUser --- ## Syntax ```javascript Session.activeUser; ``` ### Access *readonly* ### Parameters **Return value** *string* The (short) user name. ## Description The `activeUser` property is used to get the user's short name of the user currently logged in. It returns empty when not logged in. For more info about the Session object please see the [entSession](..\/..\/Application\/Properties\/entSession.md) documentation. ## Examples **Get the name of the user currently logged in** When `activeUser` is empty, there is no active session. ```javascript \/\/ Get the name of the user currently logged in. var sessionObject = app.entSession; var userShortName = sessionObject.activeUser; \/\/ userShortName is now 'Joe'. ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [entSession](..\/..\/Application\/Properties\/entSession.md)",
        "url": "1075-activeUser"
    },
    "73": {
        "title": "Scripting Events",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Scripting Events permalink: 1205-index --- Scripting events allow the integrator to perform scripts on a number of events occurring in the InDesign and InCopy application. Currently scripts can be executed around saving, opening and placing. ### Setup By default Smart Connection looks for scripts named exactly the same as the event with a \u2018.jsx\u2019 extension in the application\u2019s scripts folder. For example the script for the afterPlace event will be afterPlace.jsx. The default locations are: **Windows** C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version <x>\\Scripts\\Scripts Panel **Macintosh** ~\/Library\/Preferences\/Adobe InDesign\/Version <x>\/Scripts\/Scripts Panel Should you require a different location for the scripts or different names, then these can be modified by adding a ScriptingEvents element to wwsettings.xml: ```xml <!-- Windows --> <SCEnt:ScriptingEvents> <!-- Use the target attribute to specify for which application it will be used. Omitting the attribute will result in the path being used for all applications. --> <SCEnt:ScriptsFolderPath target=\"InCopy\">C:\\IDScripts<\/SCEnt:ScriptsFolderPath> <!-- Specify script names when you want to use the same script for multiple events. --> <SCEnt:Script event=\"afterOpenLayout\">bla.jsx<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> <!-- Macintosh --> <SCEnt:ScriptingEvents> <SCEnt:ScriptsFolderPath target=\"InCopy\">Macintosh HD:IDScripts<\/SCEnt:ScriptsFolderPath> <SCEnt:Script event=\"afterOpenLayout\">bla.jsx<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> ``` #### ScriptsFolderPath element The ScriptsFolderPath element points to the location where scripts are located. Use HFS path names for Mac OS X. It can occur zero or more times. The optional target attribute indicates in which application the path should be used. Accepted values are InCopy and InDesign. All other values are ignored and have the same result as omitting the attribute. If the element omits this attribute, the path will be used for all applications. An element with a target attribute takes precedence over an element without one. #### Script element Defines per named event which script needs to be run. Event names are equal to the list in the Events section. For events not defined in the WWsettings.xml file, the default name will be used. ### Troubleshooting It is possible to debug scripts on a per event basis when an event occurs. To debug the afterOpenLayout event: ```xml <SCEnt:ScriptingEvents> <SCEnt:Script debug=\"true\" event=\"afterOpenLayout\">bla.js<\/SCEnt:Script> <SCEnt:Script event=\"beforeSaveLayout\">bla.jsx<\/SCEnt:Script> <\/SCEnt:ScriptingEvents> ``` The events mechanism has its own logging which can be enabled through the WWsettings.xml file. This will show which script will be run and whether running is successful: ```xml <Logging level=\"0\" allareas=\"0\"> <Area name=\"ScriptingEvents\"\/> <\/Logging> ``` ### Events * [afterCreateArticle](.\/Events\/afterCreateArticle.md) * [afterCreateArticleTemplate](.\/Events\/afterCreateArticleTemplate.md) * [afterCreateContinuationElement](.\/Events\/afterCreateContinuationElement.md) * [afterCreateEnterpriseImageFromElvisImage](.\/Events\/afterCreateEnterpriseImageFromElvisImage.md) * [afterCreateJump](.\/Events\/afterCreateJump.md) * [afterCreateLayout](.\/Events\/afterCreateLayout.md) * [afterCreateLayoutTemplate](.\/Events\/afterCreateLayoutTemplate.md) * [afterDetachArticle](.\/Events\/afterDetachArticle.md) * [afterExportArticle](.\/Events\/afterExportArticle.md) * [afterExportArticleTemplate](.\/Events\/afterExportArticleTemplate.md) * [afterLogOn](.\/Events\/afterLogOn.md) * [afterOpenArticle](.\/Events\/afterOpenArticle.md) * [afterOpenLayout](.\/Events\/afterOpenLayout.md) * [afterPlace](.\/Events\/afterPlace.md) * [afterRefreshArticle](.\/Events\/afterRefreshArticle.md) * [afterRefreshImage](.\/Events\/afterRefreshImage.md) * [afterSaveArticle](.\/Events\/afterSaveArticle.md) * [afterSaveLayout](.\/Events\/afterSaveLayout.md) * [beforeCreateArticle](.\/Events\/beforeCreateArticle.md) * [beforeCreateArticleTemplate](.\/Events\/beforeCreateArticleTemplate.md) * [beforeCreateLayout](.\/Events\/beforeCreateLayout.md) * [beforeCreateLayoutTemplate](.\/Events\/beforeCreateLayoutTemplate.md) * [beforeDetachArticle](.\/Events\/beforeDetachArticle.md) * [beforeExportArticle](.\/Events\/beforeExportArticle.md) * [beforeExportArticleTemplate](.\/Events\/beforeExportArticleTemplate.md) * [beforeImportImage](.\/Events\/beforeImportImage.md) * [beforeLogOff](.\/Events\/beforeLogOff.md) * [beforePlace](.\/Events\/beforePlace.md) * [beforeSaveArticle](.\/Events\/beforeSaveArticle.md) * [beforeSaveLayout](.\/Events\/beforeSaveLayout.md) ",
        "url": "1205-index"
    },
    "74": {
        "title": "Event",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Event permalink: 1204-index --- The following fields are used to describe an event: |Field|Description| |-----|-----------| |When |Describes at what moment the event occurs.| |Where |Describes in what applications the event occurs.| |Arguments in |Table describing key value pairs set in app.scriptArgs for the event.| |Arguments out |Table describing key value pairs that a script can set in app.scriptArgs for the event.| |Notes |Event related notes.| ### Events * [afterCreateArticle](.\/afterCreateArticle.md) * [afterCreateArticleTemplate](.\/afterCreateArticleTemplate.md) * [afterCreateContinuationElement](.\/afterCreateContinuationElement.md) * [afterCreateEnterpriseImageFromElvisImage](.\/afterCreateEnterpriseImageFromElvisImage.md) * [afterCreateJump](.\/afterCreateJump.md) * [afterCreateLayout](.\/afterCreateLayout.md) * [afterCreateLayoutTemplate](.\/afterCreateLayoutTemplate.md) * [afterDetachArticle](.\/afterDetachArticle.md) * [afterExportArticle](.\/afterExportArticle.md) * [afterExportArticleTemplate](.\/afterExportArticleTemplate.md) * [afterLogOn](.\/afterLogOn.md) * [afterOpenArticle](.\/afterOpenArticle.md) * [afterOpenLayout](.\/afterOpenLayout.md) * [afterPlace](.\/afterPlace.md) * [afterRefreshArticle](.\/afterRefreshArticle.md) * [afterRefreshImage](.\/afterRefreshImage.md) * [afterSaveArticle](.\/afterSaveArticle.md) * [afterSaveLayout](.\/afterSaveLayout.md) * [beforeCreateArticle](.\/beforeCreateArticle.md) * [beforeCreateArticleTemplate](.\/beforeCreateArticleTemplate.md) * [beforeCreateLayout](.\/beforeCreateLayout.md) * [beforeCreateLayoutTemplate](.\/beforeCreateLayoutTemplate.md) * [beforeDetachArticle](.\/beforeDetachArticle.md) * [beforeExportArticle](.\/beforeExportArticle.md) * [beforeExportArticleTemplate](.\/beforeExportArticleTemplate.md) * [beforeImportImage](.\/beforeImportImage.md) * [beforeLogOff](.\/beforeLogOff.md) * [beforePlace](.\/beforePlace.md) * [beforeSaveArticle](.\/beforeSaveArticle.md) * [beforeSaveLayout](.\/beforeSaveLayout.md)",
        "url": "1204-index"
    },
    "75": {
        "title": "beforeCreateLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateLayout sortid: 62 permalink: 1194-beforeCreateLayout --- ## When Before creating a new layout in the Enterprise system. This includes Save As. ## Where InDesign, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Enterprise system. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1194-beforeCreateLayout"
    },
    "76": {
        "title": "beforeCreateLayoutTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateLayoutTemplate sortid: 62 permalink: 1195-beforeCreateLayoutTemplate --- ## When Before creating a new layout template in the Enterprise system. This includes Save As. ## Where InDesign, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Enterprise system. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1195-beforeCreateLayoutTemplate"
    },
    "77": {
        "title": "beforeCreateArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateArticleTemplate sortid: 62 permalink: 1193-beforeCreateArticleTemplate --- ## When Before sending a new article template to the Enterprise system. ## Where InDesign, InCopy, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Don\u2019t change the text of the article template at this stage. Changes will not be sent to the server. Use beforeExportArticle instead. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1193-beforeCreateArticleTemplate"
    },
    "78": {
        "title": "beforeCreateArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeCreateArticle sortid: 62 permalink: 1192-beforeCreateArticle --- ## When Before sending a new article to the Enterprise system. ## Where InDesign, InCopy, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Don\u2019t change the text of the article at this stage. Changes will not be sent to the server. Use beforeExportArticle instead. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1192-beforeCreateArticle"
    },
    "79": {
        "title": "afterSaveArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterSaveArticle sortid: 62 permalink: 1190-afterSaveArticle --- ## When After sending an article to the Enterprise system. ## Where InDesign, InCopy, InDesign Server ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article that was saved. ## Arguments out n\/a| ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1190-afterSaveArticle"
    },
    "80": {
        "title": "afterSaveLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterSaveLayout sortid: 62 permalink: 1191-afterSaveLayout --- ## When After sending a layout to the Enterprise system. ## Where InDesign, InDesign Server ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the layout that was saved.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1191-afterSaveLayout"
    },
    "81": {
        "title": "beforeDetachArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeDetachArticle sortid: 62 permalink: 1196-beforeDetachArticle --- ## When Before detaching an article from a layout. A template of placed components of the article was generated for scripter to use before detaching the article component. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object ID of the article that will be detached.| |templateGeoFilePath |The template file path.| ## Arguments out n\/a ## Notes A template with all placed components of the article will be generated in the file path: templateGeoFilePath, and will be deleted after the event. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1196-beforeDetachArticle"
    },
    "82": {
        "title": "beforeExportArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeExportArticle sortid: 62 permalink: 1197-beforeExportArticle --- ## When Before creating the XML representation of an article on disk. ## Where InDesign, InCopy, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes made to the text will be part of the export. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1197-beforeExportArticle"
    },
    "83": {
        "title": "beforeSaveArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeSaveArticle sortid: 62 permalink: 1202-beforeSaveArticle --- ## When Before sending an article to the Enterprise system. ## Where InDesign, InCopy, InDesign Server ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article being saved.| |Core_Name |New name.| |Core_Publication |New Brand.| |Core_Issue |New Issue.| |Core_Section |New Section.| |Editions |New Edition(s).| |Core_Basket |New Status.| |RouteTo |New routing.| |Action |The workflow action done by the user.| ## Arguments out |Key |Description| |----|-----------| |errorId |Set the error id to a non-zero value to abort the save.| |errorMessage |The message to be shown to the user. Requires the errorId to be set.| ## Notes Don\u2019t change the text of the article at this stage. Changes are not sent to the server. Use beforeExportArticle instead. ## Examples **Using beforeSaveArticle** ```javascript var msg = 'ID: ' + app.scriptArgs.get( 'Core_ID' ) + '\\n'; msg += 'Name: ' + app.scriptArgs.get( 'Core_Name' ) + '\\n'; msg += 'Publication: ' + app.scriptArgs.get( 'Core_Publication' ) + '\\n'; msg += 'Issue: ' + app.scriptArgs.get( 'Core_Issue' ) + '\\n'; msg += 'Section: ' + app.scriptArgs.get( 'Core_Section' ) + '\\n'; msg += 'Editions: ' + app.scriptArgs.get( 'Editions' ) + '\\n'; msg += 'Status: ' + app.scriptArgs.get( 'Core_Basket' ) + '\\n'; msg += 'RouteTo: ' + app.scriptArgs.get( 'RouteTo' ) + '\\n'; alert( msg ); \/\/ Preferred way is to set the error id and message app.scriptArgs.set( 'errorId', '12366' ); app.scriptArgs.set( 'errorMessage', 'Cannot save now.' ); \/\/ An exception that is not caught results in an error throw Error('This is an unexpected error'); ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1202-beforeSaveArticle"
    },
    "84": {
        "title": "beforeSaveLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeSaveLayout sortid: 62 permalink: 1203-beforeSaveLayout --- ## When Before sending a layout to the Enterprise system. ## Where InDesign, InDesign Server ## Arguments in |Key | Description | |----|-------------| |Core_ID |The object id of the layout being saved.| |Core_Name |New name.| |Core_Publication| New Brand.| |Core_Issue |New Issue.| |Core_Section |New Section.| |Editions |New Edition(s)| |Core_Basket |New Status| |RouteTo |New routing| |Action |The workflow action done by the user.| ## Arguments out |Key |Description| |----|-----------| |errorId |Sets the error id to a non-zero value to abort the save.| |errorMessage |The message to be shown to the user. Requires the errorId to be set. ## Notes The script can change the document. Changes will be saved and sent to the server. ## Examples **Using beforeSaveLayout** ```javascript var msg = 'ID: ' + app.scriptArgs.get( 'Core_ID' ) + '\\n'; msg += 'Name: ' + app.scriptArgs.get( 'Core_Name' ) + '\\n'; msg += 'Publication: ' + app.scriptArgs.get( 'Core_Publication' ) + '\\n'; msg += 'Issue: ' + app.scriptArgs.get( 'Core_Issue' ) + '\\n'; msg += 'Section: ' + app.scriptArgs.get( 'Core_Section' ) + '\\n'; msg += 'Editions: ' + app.scriptArgs.get( 'Editions' ) + '\\n'; msg += 'Status: ' + app.scriptArgs.get( 'Core_Basket' ) + '\\n'; msg += 'RouteTo: ' + app.scriptArgs.get( 'RouteTo' ) + '\\n'; alert( msg ); \/\/ Preferred way is to set the error id and message app.scriptArgs.set( 'errorId', '12366' ); app.scriptArgs.set( 'errorMessage', 'Cannot save now.' ); \/\/ An exception that is not caught results in an error throw Error('This is an unexpected error'); ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1203-beforeSaveLayout"
    },
    "85": {
        "title": "beforePlace",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforePlace sortid: 62 permalink: 1201-beforePlace --- ## When Before placing an object. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object ID instigated to be placed.| |GUID |The GUID of the component to be placed.| ## Arguments out |Key |Description| |----|-----------| |objectId |The overruling object ID when the incoming object must be overruled. Empty when no change has to be made.| |GUID |The overruling GUID when the incoming GUID must be overruled. Empty when no change has to be made.| ## Notes The script argument key \u2018objectId\u2019 is mandatory and case sensitive when sending back an object ID. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1201-beforePlace"
    },
    "86": {
        "title": "beforeLogOff",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeLogOff sortid: 62 permalink: 1200-beforeLogOff --- ## When Just before the log-off action. ## Where InDesign, InCopy and InDesign Server ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1200-beforeLogOff"
    },
    "87": {
        "title": "beforeExportArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeExportArticleTemplate sortid: 62 permalink: 1198-beforeExportArticleTemplate --- ## When Before creating the XML representation of an article template on disk. ## Where InDesign, InCopy, InDesign Server. ## Arguments in n\/a ## Arguments out n\/a ## Notes Changes made to the text will be part of the export, as well as changes made to the layout in InDesign (Server) that will be part of the template information. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1198-beforeExportArticleTemplate"
    },
    "88": {
        "title": "beforeImportImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeImportImage sortid: 62 permalink: 1199-beforeImportImage --- ## When Before importing (planned) image type files when synchronizing planned layouts and adverts. ## Where InDesign. ## Arguments in n\/a ## Arguments out n\/a ## Notes This event is not called when importing image type files from Smart Connection panels. ## Examples **Using beforeImportImage** ```javascript var msg=\"ID: \" + app.scriptArgs.get( \"Core_ID\" ) + \"\\n\"; msg+=\"Name: \" + app.scriptArgs.get( \"Core_Name\" ) + \"\\n\"; msg+=\"Brand: \" + app.scriptArgs.get( \"Core_Publication\" ) + \"\\n\"; msg+=\"Issue: \" + app.scriptArgs.get( \"Core_Issue\" ) + \"\\n\"; msg+=\"Section: \" + app.scriptArgs.get( \"Core_Section\" ) + \"\\n\"; msg+=\"Editions: \" + app.scriptArgs.get( \"Editions\" ) + \"\\n\"; msg+=\"Status: \" + app.scriptArgs.get( \"Core_Basket\" ) + \"\\n\"; msg+=\"RouteTo: \" + app.scriptArgs.get( \"RouteTo\" ) + \"\\n\"; msg+=\"File type: \" + app.scriptArgs.get( \"Type\" ) + \"\\n\"; msg+=\"File format: \" + app.scriptArgs.get( \"Format\" ) + \"\\n\"; msg+=\"Frame ID: \" + app.scriptArgs.get( \"pageitem\" ) + \"\\n\"; alert( msg ); ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1199-beforeImportImage"
    },
    "89": {
        "title": "afterRefreshImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterRefreshImage sortid: 62 permalink: 1189-afterRefreshImage --- ## When When opening a layout after a highres advert is placed or modified using the planning interface. ## Where InDesign ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the advert that was created or modified.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1189-afterRefreshImage"
    },
    "90": {
        "title": "afterRefreshArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterRefreshArticle sortid: 62 permalink: 1188-afterRefreshArticle --- ## When After refreshing the XML representation of an article from disk. ## Where InCopy. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article that was refreshed.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1188-afterRefreshArticle"
    },
    "91": {
        "title": "afterCreateLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateLayout sortid: 62 permalink: 1179-afterCreateLayout --- ## When A fter creating a new layout in the Enterprise system. This includes Save As. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the layout that was created.| ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Enterprise system. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1179-afterCreateLayout"
    },
    "92": {
        "title": "afterCreateLayoutTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateLayoutTemplate sortid: 62 permalink: 1180-afterCreateLayoutTemplate --- ## When After creating a new layout template in the Enterprise system. This includes Save As. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID| The object id of the layout template that was created.| ## Arguments out n\/a ## Notes Changes can be made to the document, these will be saved and sent to the Enterprise system. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1180-afterCreateLayoutTemplate"
    },
    "93": {
        "title": "afterCreateJump",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateJump sortid: 62 permalink: 1178-afterCreateJump --- ## When After creating a Smart Jump article. ## Where InDesign. ## Arguments in |Key |Description| |----|-----------| |sourceDocument |The object id of the layout from where the Smart Jump starts.| |sourceStory |The story id of the first component of the Smart Jump story.| |sourceContinuationStory |The story id of the continuation element belonging to the first component of the Smart Jump.| |[destinationDocument] |The object id of the layout where the Smart Jump lands.| |[destinationStory] |The story id of the second component of the Smart Jump story.| |[destinationContinuationStory] |The story id of the continuation element belonging to the second component of the Smart Jump.| ## Arguments out n\/a ## Notes destinationDocument, destinationStory and destinationContinuationStory are optional when for example using the \u201cCreate Jump From Here\u201d command. ## Examples **Using afterCreateJump** ```javascript var msg=\"Source ID: \" + app.scriptArgs.get(\"sourceDocument\") + \"\\n\"; msg+=\"Source Story: \" + app.scriptArgs.get(\"sourceStory\") + \"\\n\"; msg+=\"Source Continuation: \"+app.scriptArgs.get(\"sourceContinuationStory\") + \"\\n\"; if( app.scriptArgs.isDefined( \"destinationDocument\" ) ) { msg+=\"Destination ID: \" + app.scriptArgs.get(\"destinationDocument\") + \"\\n\"; msg+=\"Destination Story: \" + app.scriptArgs.get(\"destinationStory\") + \"\\n\"; msg+=\"Dest. Continuation:\"+app.scriptArgs.get(\"destinationContinuationStory\")+\"\\n\"; } alert( msg ); ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1178-afterCreateJump"
    },
    "94": {
        "title": "afterCreateEnterpriseImageFromElvisImage",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateEnterpriseImageFromElvisImage sortid: 62 permalink: 1177-afterCreateEnterpriseImageFromElvisImage --- ## When After an Enterprise Image was created from an Elvis Image (and added to a Dossier) ## Where InDesign ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the created image. | |pageItem |The id of the frame that contains the image| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1177-afterCreateEnterpriseImageFromElvisImage"
    },
    "95": {
        "title": "afterCreateArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateArticleTemplate sortid: 62 permalink: 1175-afterCreateArticleTemplate --- ## When After sending a new article template to the Enterprise system. ## Where InDesign, InCopy, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article template that was created.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1175-afterCreateArticleTemplate"
    },
    "96": {
        "title": "afterCreateContinuationElement",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateContinuationElement sortid: 62 permalink: 1176-afterCreateContinuationElement --- ## When After creating a continuation element for a Smart Jump article. ## Where InDesign. ## Arguments in |Key |Description| |----|-----------| |document |The object id of the layout from where the element is created on.| |parentStory |The story id of the component of the Smart Jump story the element belongs to.| |[continuationFromStory] |The story id of the continuation from element belonging to the component of the Smart Jump story.| |[continuationOnStory] |The story id of the continuation on element belonging to the component of the Smart Jump story.| ## Arguments out n\/a ## Notes The event is not sent when creating a Smart Jump. In that case the afterCreateJump event is sent. ## Examples **Using afterCreateJump** ```javascript var msg=\"Document: \" + app.scriptArgs.get( \"document\" ) + \"\\n\"; msg+=\"Parent Story: \" + app.scriptArgs.get( \"parentStory\" ) + \"\\n\"; if( app.scriptArgs.isDefined( \"continuationToStory\" ) ) msg+=\"Continuation To Story: \"+app.scriptArgs.get(\"continuationToStory\")+\"\\n\"; if( app.scriptArgs.isDefined( \"continuationFromStory\" ) ) msg+=\"Continuation From Story: \"+app.scriptArgs.get(\"continuationFromStory\")+\"\\n\"; alert( msg ); ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1176-afterCreateContinuationElement"
    },
    "97": {
        "title": "afterDetachArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterDetachArticle sortid: 62 permalink: 1181-afterDetachArticle --- ## When After detaching an article from a layout. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article template that was created.| ## Arguments out n\/a ## Notes This event is only broadcasted when using the Detach Article action, not when detaching by deleting the article from the layout. ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1181-afterDetachArticle"
    },
    "98": {
        "title": "afterExportArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterExportArticle sortid: 62 permalink: 1182-afterExportArticle --- ## When After creating the XML representation of an article on disk. ## Where InDesign, InCopy, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article that was exported.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1182-afterExportArticle"
    },
    "99": {
        "title": "afterOpenLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterOpenLayout sortid: 62 permalink: 1186-afterOpenLayout --- ## When After opening a layout ## Where InDesign, InDesign Server ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1186-afterOpenLayout"
    },
    "100": {
        "title": "afterPlace",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterPlace sortid: 62 permalink: 1187-afterPlace --- ## When After placing an object. ## Where InDesign, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |pageitem |The id of the frame the object was placed into.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1187-afterPlace"
    },
    "101": {
        "title": "beforeSaveLayout",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: beforeSaveLayout sortid: 62 permalink: 1185-afterOpenArticle --- ## When After opening an article ## Where InCopy ## Arguments in |Key | Description | |--------|--------------------------------------| |Core_ID | The object id of the placed article. | ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1185-afterOpenArticle"
    },
    "102": {
        "title": "afterLogOn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterLogOn sortid: 62 permalink: 1184-afterLogOn --- ## When After a successful login, re-login or fork login. ## Where InDesign, InCopy and InDesign Server ## Arguments in n\/a ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1184-afterLogOn"
    },
    "103": {
        "title": "afterExportArticleTemplate",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterExportArticleTemplate sortid: 62 permalink: 1183-afterExportArticleTemplate --- ## When After creating the XML representation of an article template on disk. ## Where InDesign, InCopy, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article that was exported.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1183-afterExportArticleTemplate"
    },
    "104": {
        "title": "afterCreateArticle",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: afterCreateArticle sortid: 62 permalink: 1174-afterCreateArticle --- ## When After sending a new article to the Enterprise system. ## Where InDesign, InCopy, InDesign Server. ## Arguments in |Key |Description| |----|-----------| |Core_ID |The object id of the article that was created.| ## Arguments out n\/a ## Notes ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Scripting Events](..\/..\/ScriptingEvents\/index.md)",
        "url": "1174-afterCreateArticle"
    },
    "105": {
        "title": "ManagedArticles",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticles permalink: 1147-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md)",
        "url": "1147-index"
    },
    "106": {
        "title": "ManagedArticles methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticles methods permalink: 1150-index --- Methods on the ManagedArticles object. * [add](.\/add.md) * [count](.\/count.md) ",
        "url": "1150-index"
    },
    "107": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 52 permalink: 1148-add --- ## Syntax ```javascript ManagedArticles.add(); ``` ### Parameters **Return value** *ManagedArticle* The created, or newly added, MangedArticle object. ## Description The `add()` method creates a new ManagedArticle scripting object that can serve as the basis for creating a new Article in Enterprise. Does not actually create the Article in Enterprise. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1148-add"
    },
    "108": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 53 permalink: 1149-count --- ## Syntax ```javascript ManagedArticles.count(); ``` ### Parameters **Return value** *number* The number of ManagedArticle objects in the collection. ## Description The `count()` method returns the number of ManagedArticle objects within the ManagedArticles collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1149-count"
    },
    "109": {
        "title": "ManagedArticle",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle permalink: 1133-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [components](Properties\/components.md) ### Methods * [abortCheckOut](Methods\/abortCeckOut.md) * [checkIn](Methods\/checkIn.md) * [checkOut](Methods\/checkOut.md) * [create](Methods\/create.md) * [detach](Methods\/detach.md) * [detachComponent](Methods\/detachComponent.md) * [detachFrame](Methods\/detachFrame.md) * [refresh](Methods\/refresh.md) * [unplacedComponents](Methods\/unplacedComponents.md)",
        "url": "1133-index"
    },
    "110": {
        "title": "ManagedArticle properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle properties permalink: 1146-index --- Properties on the ManagedArticle object. * [entMetaData](.\/entMetaData.md) * [components](.\/components.md)",
        "url": "1146-index"
    },
    "111": {
        "title": "components",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: components sortid: 50 permalink: 1144-components --- ## Syntax ```javascript ManagedArticle.components; ``` ### Access *readonly* ### Parameters **Return value** *PageItem[], Story* An array of PageItem objects or a Story. ## Description The `components` property is used to get access to the InDesign page items and stories that are the components of the current Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1144-components"
    },
    "112": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 51 permalink: 1145-entMetaData --- ## Syntax ```javascript ManagedArticle.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1145-entMetaData"
    },
    "113": {
        "title": "ManagedArticle methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedArticle methods permalink: 1141-index --- Methods on the ManagedArticle object. * [abortCheckOut](.\/abortCeckOut.md) * [checkIn](.\/checkIn.md) * [checkOut](.\/checkOut.md) * [create](.\/create.md) * [detach](.\/detach.md) * [detachComponent](.\/detachComponent.md) * [detachFrame](.\/detachFrame.md) * [refresh](.\/refresh.md) * [unplacedComponents](.\/unplacedComponents.md)",
        "url": "1141-index"
    },
    "114": {
        "title": "abortCheckOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: abortCheckOut sortid: 41 permalink: 1134-abortCheckOut --- ## Syntax ```javascript ManagedArticle.abortCheckOut(); ``` ### Parameters **Return value** The `abortCheckOut()` method does not return anything. ## Description The `abortCheckOut()` method cancels the check-out of the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1134-abortCheckOut"
    },
    "115": {
        "title": "checkIn",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkIn sortid: 42 permalink: 1135-checkIn --- ## Syntax ```javascript ManagedArticle.checkIn(); ``` ### Parameters **Return value** The `checkIn()` method does not return anything. ## Description The `checkIn()` method checks-in the placed Article in the Enterprise system. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1135-checkIn"
    },
    "116": {
        "title": "checkOut",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: checkOut sortid: 43 permalink: 1136-checkOut --- ## Syntax ```javascript ManagedArticle.checkOut(); ``` ### Parameters **Return value** The `checkOut()` method does not return anything. ## Description The `checkOut()` method checks-out the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1136-checkOut"
    },
    "117": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 44 permalink: 1137-create --- ## Syntax ```javascript ManagedArticle.create(pageItems [, stationary]); ``` ### Parameters **pageItems** *PageItem[]* The Page items that will form the Article. **stationary** *boolean (Optional)* If set to `true`, an Article Template will be created instead of an Article. Default is `false`. **Return value** The `create()` method does not return anything. ## Description The `create()` method creates a placed Article from the given page items. Depending on the system configuration, the given page item can contain images which become part of the Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1137-create"
    },
    "118": {
        "title": "detach",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detach sortid: 45 permalink: 1138-detach --- ## Syntax ```javascript ManagedArticle.detach(); ``` ### Parameters **Return value** The `detach()` method does not return anything. ## Description The `detach()` method detaches the Article from the Layout. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1138-detach"
    },
    "119": {
        "title": "detachComponent",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detachComponent sortid: 46 permalink: 1139-detachComponent --- ## Syntax ```javascript ManagedArticle.detachComponent(pageItem); ``` ### Parameters **pageItem** *PageItem, Story* Page item, or Story, that needs to be removed from the multi-component Article. **Return value** The `detachComponent()` method does not return anything. ## Description The `detachComponent()` method removes a component from a multi-component Article. The last component of the Article cannot be deatched using this method. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1139-detachComponent"
    },
    "120": {
        "title": "detachFrame",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: detachFrame sortid: 47 permalink: 1140-detachFrame --- ## Syntax ```javascript ManagedArticle.detachFrame(pageItem); ``` ### Parameters **pageItem** *PageItem, Story* Page item, or Story, that will be detached if it is a multiple placed Article component. If the passed page item is not a multiple placed Article component the Error Code \"The object cannot be detached.\" will be returned. **Return value** The `detachFrame()` method does not return anything. ## Description The `detachFrame()` method detaches a frame from a multi-component Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1140-detachFrame"
    },
    "121": {
        "title": "refresh",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: refresh sortid: 48 permalink: 1142-refresh --- ## Syntax ```javascript ManagedArticle.refresh(); ``` ### Parameters **Return value** The `refresh()` method does not return anything. ## Description The `refresh()` method updates the content of the placed Article. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1142-refresh"
    },
    "122": {
        "title": "unplacedComponents",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: unplacedComponents sortid: 49 permalink: 1143-unplacedComponents --- ## Syntax ```javascript ManagedArticle.unplacedComponents(); ``` ### Parameters **Return value** *string[]* A list of GUIDs. ## Description The `unplacedComponents()` method returns a list of GUIDs of the components that are not placed on the current Layout. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1143-unplacedComponents"
    },
    "123": {
        "title": "Dossiers",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossiers permalink: 1109-index --- ### Methods * [add](Methods\/add.md) * [count](Methods\/count.md) * [retrieve](Methods\/retrieve.md)",
        "url": "1109-index"
    },
    "124": {
        "title": "Dossiers methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossiers methods permalink: 1112-index --- Methods on the Dossiers object. * [add](.\/add.md) * [count](.\/count.md) * [retrieve](.\/retrieve.md) ",
        "url": "1112-index"
    },
    "125": {
        "title": "add",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: add sortid: 29 permalink: 1110-add --- ## Syntax ```javascript Dossiers.add(); ``` ### Parameters **Return value** *Dossier* The created, or newly added, Dossier object. ## Description The `add()` method creates a new Dossier scripting object that can serve as the basis for creating a new Dossier in Enterprise. Does not actually create the Dossier in Enterprise. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1110-add"
    },
    "126": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 30 permalink: 1111-count --- ## Syntax ```javascript Dossiers.count(); ``` ### Parameters **Return value** *number* The number of Dossier objects in the collection. ## Description The `count()` method returns the number of Dossier objects within the Dossiers collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1111-count"
    },
    "127": {
        "title": "retrieve",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: retrieve sortid: 31 permalink: 1113-retrieve --- ## Syntax ```javascript Dossiers.retrieve(objectId); ``` ### Parameters **objectId** *string* The object ID of the Dossier to retrieve from the Enterprise system. **Return value** *Dossier* The requested Dossier object. ## Description The `retrieve()` method retrieves a Dossier from the Enterprise system and adds it to the Dossiers collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1113-retrieve"
    },
    "128": {
        "title": "Dossier",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier permalink: 1098-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [items](Properties\/items.md) ### Methods * [addItem](Methods\/addItem.md) * [create](Methods\/create.md) * [refresh](Methods\/refresh.md) * [remove](Methods\/remove.md) * [removeItem](Methods\/removeItem.md) * [save](Methods\/save.md)",
        "url": "1098-index"
    },
    "129": {
        "title": "Dossier properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier properties permalink: 1107-index --- Properties on the Dossier object. * [entMetaData](.\/entMetaData.md) * [items](.\/items.md)",
        "url": "1107-index"
    },
    "130": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 27 permalink: 1106-entMetaData --- ## Syntax ```javascript Dossier.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the Dossier. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1106-entMetaData"
    },
    "131": {
        "title": "items",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: items sortid: 28 permalink: 1108-items --- ## Syntax ```javascript Dossier.items; ``` ### Access *readonly* ### Parameters **Return value** *string[]* A string of Enterprise object IDs. ## Description The `items` property is used to get a list of IDs of Enterprise objects which are residing in the current Dossier. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1108-items"
    },
    "132": {
        "title": "Dossier methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Dossier methods permalink: 1101-index --- Methods on the Dossier object. * [addItem](.\/addItem.md) * [create](.\/create.md) * [refresh](.\/refresh.md) * [remove](.\/remove.md) * [removeItem](.\/removeItem.md) * [save](.\/save.md) ",
        "url": "1101-index"
    },
    "133": {
        "title": "removeItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: removeItem sortid: 21 permalink: 1099-addItem --- ## Syntax ```javascript Dossier.removeItem(objectId); ``` ### Parameters **objectId** *string* The object ID on the Enterprise Server of the object to remove from the Dossier. **Return value** The `removeItem()` method does not return anything. ## Description The `removeItem()` method removes an item from the Dossier. Removes the item from the corresponding Dossier in Enterprise as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1099-addItem"
    },
    "134": {
        "title": "create",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: create sortid: 22 permalink: 1100-create --- ## Syntax ```javascript Dossier.create(); ``` ### Parameters **Return value** The `create()` method does not return anything. ## Description The `create()` method creates a new Dossier object. The Dossier is created in Enterprise as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1100-create"
    },
    "135": {
        "title": "refresh",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: refresh sortid: 23 permalink: 1102-refresh --- ## Syntax ```javascript Dossier.refresh(); ``` ### Parameters **Return value** The `refresh()` method does not return anything. ## Description The `refresh()` method refreshes the Dossier object with new information from the Enterprise Server. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1102-refresh"
    },
    "136": {
        "title": "remove",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: remove sortid: 24 permalink: 1103-remove --- ## Syntax ```javascript Dossier.remove(); ``` ### Parameters **Return value** The `remove()` method does not return anything. ## Description The `remove()` method removes the Dossier object. The corresponding Dossier is removed from Enterprise as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1103-remove"
    },
    "137": {
        "title": "addItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: addItem sortid: 25 permalink: 1104-removeItem --- ## Syntax ```javascript Dossier.addItem(objectId); ``` ### Parameters **objectId** *string* The object ID on the Enterprise Server of the object to add to the Dossier. **Return value** The `addItem()` method does not return anything. ## Description The `addItem()` method adds an item to the Dossier. Adds the item to the corresponding Dossier in Enterprise as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1104-removeItem"
    },
    "138": {
        "title": "save",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: save sortid: 26 permalink: 1105-save --- ## Syntax ```javascript Dossier.save(); ``` ### Parameters **Return value** The `save()` method does not return anything. ## Description The `save()` method saves the Dossier object. The corresponding Dossier is saved in Enterprise as well. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1105-save"
    },
    "139": {
        "title": "Document",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Document permalink: 1088-index --- The Document in InDesign, InDesign Server (layout) or InCopy (article). ### Properties * [activeEdition](Properties\/activeEdition.md) * [defaultEdition](Properties\/defaultEdition.md) * [managedArticles](Properties\/managedArticles.md) * [managedImages](Properties\/managedImages.md) * [managedAdverts](Properties\/managedAdverts.md) * [managedLayoutModules](Properties\/managedLayoutModules.md) * [entMetaData](Properties\/entMetaData.md) * [entWorkflow](Properties\/entWorkflow.md)",
        "url": "1088-index"
    },
    "140": {
        "title": "Document properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Document properties permalink: 1093-index --- Properties on the Document object. * [activeEdition](.\/activeEdition.md) * [defaultEdition](.\/defaultEdition.md) * [entMetaData](.\/entMetaData.md) * [entWorkflow](.\/entWorkflow.md) * [managedAdverts](.\/managedAdverts.md) * [managedArticles](.\/managedArticles.md) * [managedImages](.\/managedImages.md) * [managedLayoutModules](.\/managedLayoutModules.md)",
        "url": "1093-index"
    },
    "141": {
        "title": "activeEdition",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: activeEdition sortid: 13 permalink: 1089-activeEdition --- ## Syntax ```javascript Document.activeEdition; ``` ### Access *read\/write* ### Parameters **Return value** *string* The active Edition. ## Description The `activeEdition` property is used to get the active Edition of the current Document. The metadata of the Document contains all possible Editions that can be set. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1089-activeEdition"
    },
    "142": {
        "title": "defaultEditions",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: defaultEditions sortid: 14 permalink: 1090-defaultEditions --- ## Syntax ```javascript Document.defaultEditions; ``` ### Access *read\/write* ### Parameters **Return value** *string[]* A list of Edition names. ## Description The `defaultEditions` property is used to get the list of Edition names that new page items will be assigned to on creation. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1090-defaultEditions"
    },
    "143": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 15 permalink: 1091-entMetaData --- ## Syntax ```javascript Document.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1091-entMetaData"
    },
    "144": {
        "title": "entWorkflow",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entWorkflow sortid: 16 permalink: 1092-entWorkflow --- ## Syntax ```javascript Document.entWorkflow; ``` ### Access *readonly* ### Parameters **Return value** *EntWorkflow* An EntWorkflow object. ## Description The `entWorkflow` property is used to get access to the Enterprise worlkflow actions for the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1092-entWorkflow"
    },
    "145": {
        "title": "managedAdverts",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedAdverts sortid: 17 permalink: 1094-managedAdverts --- ## Syntax ```javascript Document.managedAdverts; ``` ### Access *readonly* ### Parameters **Return value** *ManagedAdverts* A ManagedAdverts object. ## Description The `managedAdverts` property is used to get all managed adverts belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1094-managedAdverts"
    },
    "146": {
        "title": "managedArticles",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedArticles sortid: 18 permalink: 1095-managedArticles --- ## Syntax ```javascript Document.managedArticles; ``` ### Access *readonly* ### Parameters **Return value** *ManagedArticles* A ManagedArticles object. ## Description The `managedArticles` property is used to get all managed articles belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1095-managedArticles"
    },
    "147": {
        "title": "managedImages",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedImages sortid: 19 permalink: 1096-managedImages --- ## Syntax ```javascript Document.managedImages; ``` ### Access *readonly* ### Parameters **Return value** *ManagedImages* A ManagedImages object. ## Description The `managedImages` property is used to get all managed images belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1096-managedImages"
    },
    "148": {
        "title": "managedLayoutModules",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: managedLayoutModules sortid: 20 permalink: 1097-managedLayoutModules --- ## Syntax ```javascript Document.managedLayoutModules; ``` ### Access *readonly* ### Parameters **Return value** *ManagedLayoutModules* A ManagedLayoutModules object. ## Description The `managedLayoutModules` property is used to get all managed Layout Modules belonging to the Document. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1097-managedLayoutModules"
    },
    "149": {
        "title": "Smart Connection Custom Menu Items",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Smart Connection Custom Menu Items permalink: 1171-index --- The context menu of the Documents pane in the Smart Connection panel can be extended with custom menu items. These custom menu items are provided with information by Smart Connection about the selected items, giving the custom menu items the ability to control the enabling of the items. The information passed by Smart Connection is all data from the query result for the selected itema. Custom menu items work in both list and thumbnail view, althought the information passed to the script in thumbnail view is limited. Custom menu items are added and controlled through a script. The script is placed in the Startup Scripts folder in either the application\u2019s scripts folder or in the user\u2019s scripts folder. The script locations are: |Platform|Location| |--------|--------| |Windows |C:\\Documents and Settings\\<username>\\Application Data\\Adobe\\InDesign\\Version x\\<language>\\Scripts\\Startup Scripts| ||C:\\Program Files\\Adobe\\Adobe InDesign CC\\Scripts\\Startup Scripts| |Macintosh |~\/Library\/Preferences\/Adobe InDesign\/Version x\/<language>\/Scripts\/Startup Scripts| ||\/Applications\/Adobe InDesign CC\/Scripts\/Startup Scripts| Below is an annotated sample script that adds 3 custom menu items with custom enabling. Important notes: * Smart Connection expects the naming of the functions in the ScriptMenu object and of the ScriptMenu instance as shown in the script. * There can only be one instance of the ScriptMenu object, meaning that if you have several customizations adding custom menu items, you have to think out a framework for adding custom menu items from these customizations. * The targetengine must be \u201cscriptmenu\u201d. * The name of the script file does not matter. * Any errors occuring need to handled by the script as Smart Connection will simply ignore any errors occuring during the execution of the script functions. ## Examples **Sample custom menu items script** ```javascript #targetengine \"scriptmenu\" function ScriptMenu() { \/\/ initialize the member function references \/\/ for the class prototype if (typeof(_ScriptMenu_prototype_called) == 'undefined') { _ScriptMenu_prototype_called = true; ScriptMenu.prototype.getDebugConfig = getDebugConfig; ScriptMenu.prototype.getActions = getActions; ScriptMenu.prototype.updateState = updateState; ScriptMenu.prototype.run = run; } \/** * Tells Smart Connection whether the calls need to be debugged * * @return array of bool * ----------------------------------------- * debug update? debug run? show error alerts * ----------------------------------------- * [ false, false false ] *\/ function getDebugConfig() { return [ false, false, false ]; } \/** * Provides a list of actions this script supports to the caller * * @return array of arrays of string * ----------------------------------------- * unique id name * ----------------------------------------- * [ [ \"action1\", \"initialName\" ], * [ \"action2\", \"initialName\" ], * [ \"action3\", \"initialName\" ] ] *\/ function getActions() { var r = [ [ \"1\", \"Item 1\" ], [ \"2\", \"Item 2\" ], [ \"3\", \"Item 3\" ] ]; return r; } \/** * update the state of the actions * * @return array of arrays * -------------------------------------------------------------- * unique id name enabled checked * -------------------------------------------------------------- * [ [ \"action1\", \"name\", true, false ], * [ \"action2\", \"name\", false, false ], * [ \"action3\", \"name\", true, true ] ] *\/ function updateState( selectedItemsJson ) { var selectedItems = eval( selectedItemsJson ); \/\/ selectedItems is an array of objects, each representing a selected item for( var i = 0; i < selectedItems.length; ++i ) { var selItem = selectedItems[i];v \/\/ The type of item that is selected. Either 'normal' or 'component'. \/\/ The available properties (see below) depend on this type. var itemType = selItem.itemType; \/\/ Each item has key\/value pairs representing the fields \/\/ shown in the query result. These are added as properties \/\/ to the object var id = selItem.values.ID; var t = selItem.values.Type; \/\/ Check a certain field exists var f = \"\"; if( selItem.values.hasOwnProperty( \"Format\" ) ) f = selItem.values.Format; \/\/ Iterate over all properties var vals = selItem.values; for( var k in vals ) { var v = vals[k]; } } \/\/ Build a return value, normally based on the selected items. var r = [ [ \"1\", \"Item 1\", true, false ], [ \"2\", \"Item 2\", false, false ], [ \"3\", \"Item 3\", true, true ] ]; return r; } \/** * execute the given action. actionId is as defined by getActions * Script is responsible for handling all errors. *\/ function run( selectedItemsJson, actionId ) { \/\/ Do something alert( actionId ); } } var scriptMenu = new ScriptMenu; ``` ",
        "url": "1171-index"
    },
    "150": {
        "title": "EntIssue",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntIssue permalink: 1114-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1114-index"
    },
    "151": {
        "title": "EntIssue properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntIssue properties permalink: 1116-index --- Properties on the EntIssue object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1116-index"
    },
    "152": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 32 permalink: 1115-id --- ## Syntax ```javascript EntIssue.id; ``` ### Access *readonly* ### Parameters **Return value** *string* The ID of the Issue. ## Description The `id` property is used to get the object ID of the Issue. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1115-id"
    },
    "153": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 33 permalink: 1117-name --- ## Syntax ```javascript EntIssue.name; ``` ### Access *readonly* ### Parameters **Return value** *string* The name of the Issue. ## Description The `name` property is used to get the name of the Issue. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1117-name"
    },
    "154": {
        "title": "EntPublication",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntPublication permalink: 1118-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1118-index"
    },
    "155": {
        "title": "EntPublication properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntPublication properties permalink: 1120-index --- Properties on the EntPublication object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1120-index"
    },
    "156": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 34 permalink: 1119-id --- ## Syntax ```javascript EntPublication.id; ``` ### Access *readonly* ### Parameters **Return value** *string* The ID of the Brand. ## Description The `id` property is used to get the ID of the Brand. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1119-id"
    },
    "157": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 35 permalink: 1121-name --- ## Syntax ```javascript EntPublication.name; ``` ### Access *readonly* ### Parameters **Return value** *string* The name of the Issue. ## Description The `name` property is used to get the name of the Brand. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1121-name"
    },
    "158": {
        "title": "ManagedAdverts",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdverts permalink: 1130-index --- ### Methods * [count](Methods\/count.md)",
        "url": "1130-index"
    },
    "159": {
        "title": "ManagedAdverts methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdverts methods permalink: 1132-index --- Methods on the ManagedAdverts object. * [count](.\/count.md) ",
        "url": "1132-index"
    },
    "160": {
        "title": "count",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: count sortid: 40 permalink: 1131-count --- ## Syntax ```javascript ManagedAdverts.count(); ``` ### Parameters **Return value** *number* The number of ManagedAdvert objects in the collection. ## Description The `count()` method returns the number of ManagedAdvert objects within the ManagedAdverts collection object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1131-count"
    },
    "161": {
        "title": "ManagedAdvert",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdvert permalink: 1126-index --- ### Properties * [entMetaData](Properties\/entMetaData.md) * [pageItem](Properties\/pageItem.md)",
        "url": "1126-index"
    },
    "162": {
        "title": "ManagedAdvert properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: ManagedAdvert properties permalink: 1128-index --- Properties on the ManagedAdvert object. * [entMetaData](.\/entMetaData.md) * [pageItems](.\/pageItem.md)",
        "url": "1128-index"
    },
    "163": {
        "title": "entMetaData",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entMetaData sortid: 38 permalink: 1127-entMetaData --- ## Syntax ```javascript ManagedAdvert.entMetaData; ``` ### Access *readonly* ### Parameters **Return value** *EntMetaData* An EntMetaData object. ## Description The `entMetaData` property is used to get the Enterprise metadata associated with the Advert. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1127-entMetaData"
    },
    "164": {
        "title": "pageItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: pageItem sortid: 39 permalink: 1129-pageItem --- ## Syntax ```javascript ManagedAdvert.pageItem; ``` ### Access *readonly* ### Parameters **Return value** *PageItem* A PageItem object. ## Description The `pageItem` property is used to get access to the associated InDesign PageItem object. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1129-pageItem"
    },
    "165": {
        "title": "EntSection",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntSection permalink: 1122-index --- ### Properties * [id](Properties\/id.md) * [name](Properties\/name.md)",
        "url": "1122-index"
    },
    "166": {
        "title": "EntSection properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: EntSection properties permalink: 1124-index --- Properties on the EntSection object. * [id](.\/id.md) * [name](.\/name.md)",
        "url": "1124-index"
    },
    "167": {
        "title": "id",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: id sortid: 36 permalink: 1123-id --- ## Syntax ```javascript EntSection.id; ``` ### Access *readonly* ### Parameters **Return value** *string* The ID of the Category. ## Description The `id` property is used to get the ID of the Category. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1123-id"
    },
    "168": {
        "title": "name",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: name sortid: 37 permalink: 1125-name --- ## Syntax ```javascript EntSection.name; ``` ### Access *readonly* ### Parameters **Return value** *string* The name of the Category. ## Description The `name` property is used to get the name of the Category. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1125-name"
    },
    "169": {
        "title": "Application",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application permalink: 1065-index --- The object representing the InDesign or InCopy application. ### Properties * [entSession](Properties\/entSession.md) ### Methods * [browseQuery](Methods\/browseQuery.md) * [getDossiersForItem](Methods\/getDossiersForItem.md) * [jsonRequest](Methods\/jsonRequest.md) * [namedQuery](Methods\/namedQuery.md) * [offlineQuery](Methods\/offlineQuery.md) * [openObject](Methods\/openObject.md) * [queryObjects](Methods\/queryObjects.md) * [sendObjectToNext](Methods\/sendObjectToNext.md) * [storedUserQuery](Methods\/storedUserQuery.md) * [updatePanels](Methods\/updatePanels.md)",
        "url": "1065-index"
    },
    "170": {
        "title": "Application properties",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application properties permalink: 1073-index --- Properties on the Application object. * [entSession](.\/entSession.md)",
        "url": "1073-index"
    },
    "171": {
        "title": "entSession",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: entSession sortid: 12 permalink: 1087-entSession --- ## Syntax ```javascript app.entSession; ``` ### Access *readonly* ### Parameters **Return value** *Session* The Enterprise Session object. ## Description The `entSession` property gives access to the Enterprise session by returning a Session object. For more info about the Session object please see the [Session](..\/..\/Session\/index.md) documentation. ## Examples **Check if there is an active session** When `activeUrl` is empty, there is no active session. ```javascript \/\/ Check if the session is active. var sessionObject = app.entSession; var activeSession = (sessionObject.activeUrl !== \"\"); \/\/ When logged in, activeSession is now 'true'. \/\/ When not logged in, activeSession is 'false'. ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 | ## See also * [Session](..\/..\/Session\/index.md)",
        "url": "1087-entSession"
    },
    "172": {
        "title": "Application methods",
        "author": "",
        "category": "",
        "content": "--- layout: section title: Application methods permalink: 1077-index --- Methods on the Application object. * [browseQuery](.\/browseQuery.md) * [getDossiersForItem](.\/getDossiersForItem.md) * [jsonRequest](.\/jsonRequest.md) * [namedQuery](.\/namedQuery.md) * [offlineQuery](.\/offlineQuery.md) * [openObject](.\/openObject.md) * [queryObjects](.\/queryObjects.md) * [sendObjectToNext](.\/sendObjectToNext.md) * [storedUserQuery](.\/storedUserQuery.md) * [updatePanels](.\/updatePanels.md) ",
        "url": "1077-index"
    },
    "173": {
        "title": "browseQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: browseQuery sortid: 1 permalink: 1076-browseQuery --- ## Syntax ```javascript app.browseQuery(brand, issue, section, state); ``` ### Parameters **brand** *string* The name of the Brand to browse for. **issue** *string* The name of the Issue to browse for. **section** *string* The name of the Section to browse for. **state** *string* The name of the State to browse for. **Return value** *string* A string representing the Browse query result. The result is comma separated. ## Description The `browseQuery()` method generates the result of the Browse query returned by the Enterprise server. ## Examples **Get the results for a specific query** ```javascript \/\/ Get browse query results from the server. var queryResult = app.browseQuery(\"WW News\", \"1st Issue\", \"News\", \"Ready\"); \/\/ queryResult is now: \/\/ \/\/ \"Columns: <int, ID><string, Name><string, Type><string, In Use By> \/\/ <int, Rating><multilist, Issues><list, Status><string, Status ID> \/\/ <int, Flag><list, Category><string, Category><double, Width> \/\/ <double, Height><string, Created By><string, Aspect ratio> \/\/ <string, Urgency><datetime, Created On><multiline, Description> \/\/ <string, Copyright (c)><int, Size><datetime, Modified On> \/\/ <string, Modified By><string, Author><list, Route To> \/\/ <string, Placed On><list, Brand><string, Brand ID> \/\/ <string, Planned Page Range><string, Page Range><string, FlagMsg> \/\/ <icon, Deadline><datetime, Deadline><string, Placed On Page> \/\/ <multiline, Comment><string, Color Space><int, Columns> \/\/ <string, Issue ID><string, Format><bool, LockForOffline> \/\/ <multilist, Issue IDs><multilist, Edition IDs><bool, HasChildren> \/\/ \/\/ Rows: \/\/ <6315, test-layout, Article, , , 1st Issue, Ready, 2, , \/\/ News, 1, 523.275591, 769.889764, Joe, , , 06\/12\/2018 09:07, , , \/\/ 56 KB, 06\/12\/2018 09:10, Joe, , , L-testupdate1, WW News, 1, , , , \/\/ 0;cdcdcd, , 1, , , 1, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ <1921, AWinttroart1, Article, , , 1st Issue, Ready, 2, , \/\/ News, 1, 164, 175, Joe, , , 03\/01\/2018 14:54, , , 56 KB, \/\/ 03\/01\/2018 15:05, Joe, , Joe, LWinttroart1, WW News, 1, , , , \/\/ 0;cdcdcd, , 1, , , 3, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ <1922, Art2, Article, , , 1st Issue, Ready, 2, , News, 1, \/\/ 523.275591, 769.889764, Joe, , , 03\/01\/2018 14:59, , , 50 KB, \/\/ 03\/01\/2018 15:01, Joe, , , LWinttroart1, WW News, 1, , , , 0;cdcdcd, \/\/ , 1, , , 1, , application\/incopyicml, false, 1, 1, 2, false> \/\/ \/\/ \/\/ First Entry: 1 \/\/ \/\/ Listed Entries: 3 \/\/ \/\/ Total Entries: 3\" ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1076-browseQuery"
    },
    "174": {
        "title": "getDossiersForItem",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: getDossiersForItem sortid: 2 permalink: 1078-getDossiersForItem --- ## Syntax ```javascript app.getDossiersForItem(objectId); ``` ### Parameters **objectId** *string* The object ID on the Enterprise Server of the object to get its Dossiers for. **Return value** *string[]* An array of string representing the Browse query result. The result is comma separated. ## Description The `getDossierForItem()` method performs a query on the Enterprise Server to retrieve all Dossier IDs of which the object is part of. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1078-getDossiersForItem"
    },
    "175": {
        "title": "jsonRequest",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: jsonRequest sortid: 3 permalink: 1079-jsonRequest --- ## Syntax ```javascript app.jsonRequest(jsonUrl, jsonRequest); ``` ### Parameters **jsonUrl** *string* The path to the Enterprise server URL which can receive and respond to requests done in JSON object string format. **jsonRequest** *string* The request to post to the above URL in JSON object string format. **Return value** *string* A string containing the complete and total server response. ## Description The `jsonRequest()` method posts a JSON object string as a request to an Enterprise Server URL in order to receive a response in JSON object string format. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1079-jsonRequest"
    },
    "176": {
        "title": "namedQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: namedQuery sortid: 4 permalink: 1080-namedQuery --- ## Syntax ```javascript app.namedQuery(queryName [, filename] [, fileType]); ``` ### Parameters **queryName** *string* The name of the query **fileName** *string (Optional)* The name of the object or file. **fileType** *string (Optional)* The type of th object or file. **Return value** *string* A string representing the Browse query result. The result is comma separated. ## Description The `namedQuery()` method performs a named query. It can be used for the Inbox, Templates and NameSearch queries. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1080-namedQuery"
    },
    "177": {
        "title": "offlineQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: offlineQuery sortid: 5 permalink: 1081-offlineQuery --- ## Syntax ```javascript app.offlineQuery(); ``` ### Parameters **Return value** *string* A string representing the result for the offline query event. ## Description The `namedQuery()` method performs an offline query. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1081-offlineQuery"
    },
    "178": {
        "title": "openObject",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: openObject sortid: 6 permalink: 1082-openObject --- ## Syntax ```javascript app.openObject(objectId [, checkout] [, withWindow] [, type] [, doessierId]); ``` ### Parameters **objectId** *string* The object ID on the Enterprise Server of the object to open. **checkout** *boolean (Optional)* Pass `false` to open te document as read-only. For template files, pass `false` top open an instance instead of the original object. Default value is `true`. **withWindow** *boolean (Optional)* Pass `false` top open the document without opening a window. Default is `true`. **type** *string (Optional)* The object type. Default is an empty string. **dossierId** *string (Optional)* The ID of the default parent Dossier. Default is an empty string. The passed Dossier ID will be used as the default selected Dossier in the Save As dialog ow when creating an Article or Image from the Layout (if the document is a layout). **Return value** *Document* The Document object which is opened. Undefined when a Document could not be openend. ## Description The `openObject()` method opens a Document from the Enterprise Server. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1082-openObject"
    },
    "179": {
        "title": "queryObjects",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: queryObjects sortid: 8 permalink: 1083-queryObjects --- ## Syntax ```javascript app.queryObjects(criteria); ``` ### Parameters **criteria** *string[]* The query criteria in the form of `<key, value>` pairs ```javascript criteria[0] = 'Brand, WW News'; criteria[1] = 'Issue, 2nd Issue'; ... ``` **Return value** *string* A string representing the query result. ## Description The `queryObjects()` method performs a user query based in the passed criteria. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|-----------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1083-queryObjects"
    },
    "180": {
        "title": "sendObjectToNext",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: sendObjectToNext sortid: 9 permalink: 1084-sendObjectToNext --- ## Syntax ```javascript app.sendObjectToNext(objectId); ``` ### Parameters **objectId** *string* The object ID on the Enterprise Server. **Return value** The `sendObjectToNext()` method does not return anything. ## Description The `sendObjectToNext()` method sends an object to its next status. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1084-sendObjectToNext"
    },
    "181": {
        "title": "storedUserQuery",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: storedUserQuery sortid: 10 permalink: 1085-storedUserQuery --- ## Syntax ```javascript app.storedUserQuery(queryName); ``` ### Parameters **queryName** *string* The stored name of the query **Return value** *string* A string representing the stored user query result. ## Description The `storedUserQuery()` method generates the result for the strored user query event. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1085-storedUserQuery"
    },
    "182": {
        "title": "updatePanels",
        "author": "",
        "category": "",
        "content": "--- layout: chapter title: updatePanels sortid: 11 permalink: 1086-updatePanels --- ## Syntax ```javascript app.updatePanels(); ``` ### Parameters **Return value** The `updatePanels()` method does not return anything. ## Description The `updatePanels()` method refreshes the contents of all Enterprise query panels. Throws an exception in case of an error. ## Examples **Example title** ```javascript ``` ## Supported versions | Adobe Version | Supported | |---------------|---------| | CC | \u2714 | | CC 2014 | \u2714 | | CC 2015 | \u2714 | | CC 2017 | \u2714 | | CC 2018 | \u2714 | | CC 2019 | \u2714 |",
        "url": "1086-updatePanels"
    }
}